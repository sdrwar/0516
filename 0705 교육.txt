ssh -i "C:\Users\User\Downloads\key\ec2-ssh-key.pem" ec2-user@ec2-15-168-38-231.ap-northeast-3.compute.amazonaws.com
ssh -i "C:\Users\User\Downloads\key\ec2-ssh-key.pem" root@ec2-13-208-174-185.ap-northeast-3.compute.amazonaws.com
public1-server-sdr-osaka
Ubuntu OS에서 했던 작업 중

[bind-address 변경 (모두 허용할 수 있게? 아무튼 그런 것 같음)
ubuntu@ip-10-0-133-227:~$ ss -antp | grep :3306
LISTEN 0      80         127.0.0.1:3306      0.0.0.0:*
			localhost 자신의 요청에 대해서만 응답을 함.
			0.0.0.0:3306
ubuntu@ip-10-0-133-227:~$ cat /etc/mysql/mariadb.conf.d/50-server.cnf
bind-address            = 127.0.0.1 이부분을 변경해야함
ubuntu@ip-10-0-133-227:~$ sudo vi /etc/mysql/mariadb.conf.d/50-server.cnf
ubuntu@ip-10-0-133-227:~$ grep bind-address /etc/mysql/mariadb.conf.d/50-server.cnf
bind-address            = 0.0.0.0 (바뀐 것을 확인)
ubuntu@ip-10-0-133-227:~$ ss -antp | grep :3306
LISTEN 0      80         127.0.0.1:3306      0.0.0.0:*
그 후 $sudo systemctl restart mariadb]

•이 작업은 Amazon Linux에서는 0.0.0.0으로 설정되어 있어 변경하지 않아도 되는데, Ubuntu OS 이슈로 인해 127.0.0.1을 바꿔주었다

■VPC 어제와 똑같이 가용영역 2개로 만들었다(달라진 것이 없이)
VPC 생성 후 라우팅 테이블의 프라이빗의 라우팅 테이블은 같지만 서브넷 연결이 다르다
인스턴스 생성 -> 웹서버, 디비, 웹서버, 디비가 아니라 웹서버만 4개 생성 [보안그룹은 VPC메뉴에서 만들어서 하나만 사용 
ssh,http,ICMP{핑테스트용} 소스 0.0.0.0/0 설정 후]
※보안 상 규칙을 하나 더 만들어 내 IP를 넣고 10.x.0.0 주소도 넣어야 하지만 실습용이라 0.0.0.0/0으로 설정하였다.
-> 고급 세부정보에서 아래 명령어 까지 넣고 인스턴스 시작

#! /bin/bash
sudo dnf install httpd -y
sudo systemctl start httpd
sudo systemctl enable httpd
sudo echo $HOSTNAME > /var/www/html/index.html

퍼블릭 주소로 접속을 하면 만들어 둔 index.html의 내용이 보인다, 그 후 SSH 접속을 한다
cd /var/www/html로 이동하여 ls로 index.html 파일이 있는지 확인.
ps -ef | grep httpd로 권한이 apache가 들어가 있는지 확인, 아파치가 권한이 없으면 httpd가 동작하지 않을 수 있다
echo $HOSTNAME을 입력: 시스템의 호스트 이름을 저장하고 있으며, 일반적으로 네트워크 상에서 컴퓨터를 식별하는 데 사용되는 이름이 나온다

-스냅샷과 AMI이미지 생성을 위해 인스턴스 중지를 한다, 중지됨 상태가 되면
엘레스틱 블록 스토어 -> 볼륨 가면 볼륨이 사용 중을 확인하고 아래 연결된 인스턴스도 확인해 본다
스냅샷으로 가서(백업,복제) 어쩌고.. 그다음 이미지-> AMI로 가서 뭐 하는데

간단하게 인스턴스 -> 작업 -> 이미지 및 템플릿 -> 이미지 생성 이랑 비슷한 과정이다
이름을 넣고 이미지 생성을 누르면 Elastic Block Store->스냅샷에서 생성 중인것을 확인할 수 있다

인스턴스로 가서 인스턴스 시작을 눌러서 찍은 스냅샷(백업,복제)이미지를 넣어 같은 설정으로 생성 할 수 있다.
인스턴스의 이름을 넣고 하단의 OS선택 목록 위에 내AMI 이미지를 누르면 볼 수 있다
만든 스냅샷을 이용하여 나머지 3개의 서버를 만들자

AMI관련 용어 중 탬플릿: 네트워크의 설정들까지 똑같이 스냅샷한 것
스냅샷: Amazon Elastic Block Store(Amazon EBS) 볼륨의 데이터를 백업하는 데 사용되는 기능
EBS 스냅샷 기능을 사용하면 EBS 볼륨의 특정 시점에 대한 포인트-인-타임(point-in-time) 복사본을 생성하여 데이터를 저장 및 복원할 수 있다
스냅샷은 Amazon Simple Storage Service(S3)에 압축되어 저장되며, 내구성과 안정성을 보장

■VPC 피어링 (Virtual Private Cloud Peering: VPC를 동등하게, 대등하게 만든다?)

나의 VPC ID: vpc-09aa1f390a6335bd2
짝꿍 VPC ID: vpc-0767dadb79c341709

VPC -> 피어링 연결 -> 피어링 연결 생성
이름은 짝의 이름-리전 or 요청자를 식별할 수 있는 이름 (osaka-peer-sdr)
VPC ID(요청자: 내 ID): 요청하는 사람만 설정
계정은 내 계정(같은리전) 다른계정(다른리전) / 리전은 다른리전(수락자의 리전 입력)
VPC ID(수락자)의 ID는 짝의 아이디(엑셀 파일을 확인하여 리전이 다를 경우 계정 ID, 리전명을 복붙하고 짝꿍의 VPC ID를 복붙해주어 연결 생성)
연결 생성을 하면 요청이 가고 수락자의 VPC피어링 연결에 목록에 떠있어서 선택->작업->수락으로 수락할 수 있다 (2개의 VPC가 연결된 것)
단, 인스턴스 통신이 안된다. 라우팅 설정을 추가로 해야 함(이미 SSH접속한 인스턴스도 연결이 끊어졌다)
IP주소가 중복되면 안된다. cmd 창에서 show ip route로 라우팅 주소를 확인가능

※VPC 피어링: 
•AWS의 VPC 피어링은 두 가상 사설 클라우드(VPC) 간의 네트워크 연결을 설정하고 관리하는 기능
 VPC 피어링에 의해 생성된 연결을 사용하면 VPC 간의 트래픽이 AWS의 개인 네트워크 인프라를 거쳐 패킷의 노출 또는 호프 수를 줄이게 됩니다
설정 후에는 연결된 VPC 간에 리소스를 쉽게 공유할 수 있습니다

ㅁVPC 피어링의 주요 특징과 기능:
1. 상호 VPC 안전한 연결: 사용자는 VPC 피어링을 사용하여 두 개의 VPC를 거쳐 AWS 네트워크에서 직접적으로 연결할 수 있습니다.
이러한 연결은 프라이빗 IP 주소를 사용하기 때문에 데이터가 인터넷을 거치지 않게 됩니다.

2. 복잡한 네트워크 구성 간소화: VPC 피어링을 사용하여 운영하기 쉬운 일관된 네트워크 토포로지를 구축할 수 있습니다. 
사용자는 일부로 노출되지 않는 간섭을 방지하기 위해 패킷 암호화 및 하드웨어 VPN 연결을 설정하지 않아도 됩니다.

3. 다른 계정 간 VPC 간 연결: VPC 피어링을 사용하면 다른 AWS 계정의 VPC와 피어링할 수 있습니다. 
이를 통해 여러 계정 간에 리소스를 안전하게 공유 및 통합할 수 있습니다.

4. 다른 리전 간의 연결: VPC 피어링은 어떤 VPC가 속한 리전과 상관없이 VPC간 연결을 설정할 수 있습니다. 
이로 인해 사용자는 특정 VPC의 리소스를 여러 리전에 걸쳐 확장할 수 있습니다.

따라서, VPC 피어링은 AWS 사용자에게 안전성, 내구성 및 경량 통합을 제공하여 마이그레이션 및 스케일링을 쉽게 만들어줍니다
이를 통해 고객은 복잡한 네트워크를 단순화하고 전체적인 네트워킹 운영 비용을 최적화할 수 있습니다.

라우팅 테이블->연결하고자 하는 라우팅(퍼블릭, 프라이빗 둘 다도 가능)->라우팅 편집 추가-> 10.x.0.0으로 수정(짝의 ip)
옆에 대상 pcx-(기본 VPC피어링 파일명) 치고 밑에 나온 피어링 ID 선택 후 저장 (라우팅 테이블은 요청자, 수락자 모두 설정해줘야 한다)

피어링 삭제 시 라우팅 테이블 포함 삭제 해줘야한다(라우팅 테이블을 남기면 다른 VPC와 피어링 연결을 위해 생성 시 블랙홀이 떠, 수동으로 삭제해줘야 한다)

VPC A는 다른 VPC B, VPC C와  피어링을 할 수 있지만, VPC B와 VPC C는 연결이 되지 않고, VPC A를 연결점으로 사용할 수 없다
VPC B와 VPC C를 연결 하려면 둘을 피어링을 해줘야 한다
                A
                /\
               B C

로드 밸런서의 설명
Application Load Balancer(ALB): HTTP나 HTTPS에 특화됨/용도: 웹사이트나 REST API를 제공하는 사이트
Network Load Balancer: 다양한 통신에 대응할 수 있음/용도: 게임, 채팅 등
Classic Load Balancer: 위의 두 로드밸런서가 등장하기 전에 사용됨
Gateway Load Balancer: 용량을 확장 가능하게 하는 동시에, 가상 어플라이언스까지 네트워크 트래픽을 안정적으로 전달하는 데 사용

로드밸런서 대상그룹 생성
ec2->로드밸런싱->대상그룹->대상그룹 생성->인스턴스 밑에 대상 그룹 이름 설정->VPC는 전에 만든 내 VPC 선택->고급상태 검사설정 훑어보고 다음
->사용 가능한 인스턴스에서(실습 때는 퍼블릭만 선택) 사용할 인스턴스를 선택하고->아래보류중인것으로 포함->대상그룹생성

로드밸런싱에서 로드밸런서 생성
ec2->로드밸런싱->로드밸런서 생성->ALB->로드밸런서 이름 생성(web-public-lb)->네트워크 매핑 VPC에서 내 VPC 선택->밑에 ap-northeast-3a 체크박스
둘 다 체크 후, 서브넷 퍼블릭으로 변경->보안그룹에서 HTTP로 설정하거나 이 전에 만든 내 보안그룹 선택->리스너 및 라우팅에서 대상그룹 선택에서 전에 생성한
대상 그룹 선택(HTTP 80 web-tg)->생성

생성된 로드밸런서 클릭->세부정보->맨 하단의 DNS이름 복사->웹페이지로 접속, 새로고침할 때마다 주소가 바뀌는 것을 확인
※unhealthy로 뜨면 등록을 취소하고 cmd 창으로 웹서버 1,2에 각각 들어가 httpd가 작동중인지 확인하고, 작동이 되지 않고 있다면 실행하고 언에이블시켜주고
다시 퍼블릭 1,2를 등록시킨다.

대상 그룹에서 속성->편집으로 들어가 라운드 로빈 방식 밑에 대상 선택 구성 고정 활성화 로드 밸런서 생성 쿠키, 고정 지속시간 1일 설정을 하면 웹서버의 LB주소를
새로고침 해도 쿠키때문에 주소가 바뀌지 않는다.

퍼블릭 1,2를 묶은 로드밸런서는 퍼블릭 IP 주소가 있어 인터넷 연결이 되니 웹페이지에서 확인이 가능했지만, 프라이빗 1,2를 대상그룹으로 묶은 LB는 
프라이빗이라 퍼블릭 IP주소가 없기 때문에, 인터넷 주소로 웹페이지에서 확인할 수 없고 cmd 창에서 curl 주소 명령어로 확인할 수 있다

삭제할 때
1. 로드밸런서 삭제 후 대상 그룹 삭제
2. 시간 제일 오래 걸리는 VPC->NAT게이트웨이 삭제 후 나머지 (삭제 안되면 에러 메시지보고 다른 목록으로 돌아가 다른거 먼저 삭제)
3. VPC 삭제를 하면 라우팅 테이블과 보안그룹? 아무튼 같이 삭제 된다고 하니 NAT와 인터넷게이트웨이 삭제하면 VPC삭제 부터