정철 강사님
tland12@naver.com
http://naver.me/xcJiW91Z

■Docker를 활용한 컨테이너 관리
커널: OS의 핵심 부분

컨테이너는 자체에는 의미가 없지만 설치된 어플리케이션을 어떻게 사용하느냐 어떻게 설치하느냐에 따라 용도가 달라진다

■Docker Container:
소프트웨어가 실행되는 환경을 캡슐화하는 기술
컨테이너는 격리된 공간을 제공하여 애플리케이션을 실행하기 위한 모든 라이브러리 및 종속성을 포함하며
호스트 운영 체제와는 독립적으로 실행, 이를 통해 애플리케이션 개발과 배포를 더 효율적으로 관리할 수 있다

종속성이란 특정 소프트웨어를 실행하기 위해 필요한 다른 소프트웨어를 의미
예를 들어, Java 프로그램을 실행하려면 Java Runtime Environment(JRE)가 필요
Docker Container는 애플리케이션을 실행하기 위한 모든 종속성을 포함, 이를 통해 애플리케이션을 다른 환경에서 쉽게 배포할 수 있다

■Docker Container를 실행하기 위한 필수 요소: CPU, RAM, HDD

빌드 : 이미지 생성
쉽 : 저장
런 : 컨테이너 생성

■빌드 단계에서 이미지 생성하는 방법 두가지 
Download: 레지스트리에서 이미지 다운로드 (네트워크가 되야 함)
Dockerfile:  이미지를 위한 소스코드 (대문자 D를 써야한다 Docker 소문자d는 인식을 하지못한다)
Podman에서는 Dockerfile의 이름이 아닌 Containerfile을 써야 한다

■Kernel이 존재하는 이유: Hardware control

이미지는 여러개의 Layer로 구성
(레이어 구성순서: Layer -> Image -> Container -> Pod)
Pod : Group of Container

이미지와 컨테이너는 프로세스 상태로 존재(메모리에 저장)
Union filesystem: 하드디스크 상태로도 저장된다, 컨테이너 삭제 시에도 메모리 뿐만 아니라 하드디스크 상태에서도 삭제가 된다

16p
하이퍼바이저: VM웨어
컨테이너런타임: Docker  / OS(Host OS)

■우리 실습 구조

c1|c2|c3 -> App
Docker -> ContainerRuntime
CentOS -> VM, GuestOS
VMware workstation -> Hypervisor
Windows10 -> Host OS

■Docker와 Kubernetes의 차이점:
Docker와 Kubernetes는 모두 컨테이너 기반의 플랫폼이지만, 그 목적과 기능은 다르다
Docker는 컨테이너를 생성, 관리 및 배포하는 데 사용되는 도구
Kubernetes는 여러 개의 컨테이너를 관리하고 클러스터에서 애플리케이션을 실행하는 데 사용되는 오픈 소스 플랫폼
Docker는 단일 머신에서 컨테이너를 실행하는 데 사용될 수 있지만, Kubernetes는 여러 머신에서 컨테이너를 실행하고 관리하는 데 사용

■Xshell을 이용한 Docker의 설치
설치 전 VMware Edit에서 버추얼 네트워크 에디트를 실행 후 VMnet1번을 NAT로 설정해준다(기존 VMnet8번을 Host-only로 설정 후 바꾸면 된다)
우측 하단의 체인치 세팅을 클릭한 후 서브넷 아이피 213.0.113.0으로 설정 후 DHCP 세팅을 213.0.113으로 설정한다(스타트, 엔딩 뒷 주소는 건드리지 않는다)
NAT 세팅에 들어가서 게이트웨이 IP를 213.0.113.2로 설정 후 Apply->OK를 한다
VMware 내에서 네트워크 세팅: Ethernet ens33 톱니바퀴를 눌러 네트워크 세팅에 들어가 IPv4에서 매뉴얼로 선택한 뒤 IPaddress 213.0.113.3 Netmask
255.255.255.0 Gateway 213.0.113.2 DNS 213.0.113.2로 설정을 해주고 터미널을 연다

■CentOS 8 기본 설정
# hostnamectl set-hostname master.example.com
# systemctl stop firewalld
# systemctl disable firewalld
# vim /etc/selinux/config
SELINUX=disabled
# setenforce 0
IP 변경하기 <- VMware 내에서 설정 - 네트워크에서 바꾼 것
IP Address: 213.0.113.3/255.255.255.0
gateway: 213.0.113.2
dns: 213.0.113.2
# nmcli con down ens33 -> nmcli con show를 하면 디바이스의 이름을 확인할 수 있다
# nmcli con up ens33
# ifconfig ens33
# ping -c 4 www.google.com -> 무조건 ping 테스트를 하여 접속이 되는지부터 확인하는 것이 첫번째이다
# bash -> bash 명령어로 다른 유저로 접속을 한다는 뜻이라고 이해했다 (새로운 쉘을 실행하고 새로운 호스트이름으로 접속)

213으로 접속이 되지 않을 때에는 VMware 에디트에서 add를 하여 Network를 추가시킨 뒤 192.168.0.1을 추가 시키고
213때와 마찬가지로 설정을 했는데, NAT는 1개이기 때문에 Host-only로 설정을 했고 VMware 내에서도 Gateway 항목은 비워두고 192.168.1.x로 설정했다
게이트웨이가 2개 이상 설정 되어있으면 나가는 길을 찾지 못하므로

■Xshell에서 Master로의 접속 시도
$ ssh root@213.0.113.3

Xshell에서의 Docker설치
[root@master ~]# cat /etc/centos-release <- CentOS의 버전 확인
CentOS Stream release 8 
[root@master ~]# yum install yum-utils –y 
[root@master ~]# yum remove runc -y <- 기존 CentOS 8에 설치된 Container Runtime을 삭제시킨다(Docker와 충돌이 일어나므로)
[root@master ~]# yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
-> Docker repo를 생성,  cd /etc/yum.repos.d/ 명령어 후 ls 를 통해 docker-ce.repo파일이 생성되었는 지 확인
# dnf repolist 명령어로 docker-ce-stable 파일이 생성되었는 지 까지 확인
[root@master ~]# yum install docker-ce -y
[root@master ~]# rpm -qa | grep docker -> Docker 패키지를 나열하는 명령어
docker-ce-23.0.1-1.el8.x86_64
docker-buildx-plugin-0.10.2-1.el8.x86_64 
docker-scan-plugin-0.23.0-3.el8.x86_64 
docker-ce-cli-23.0.1-1.el8.x86_64
docker-ce-rootless-extras-23.0.1-1.el8.x86_64 
docker-compose-plugin-2.16.0-1.el8.x86_64 
[root@master ~]# systemctl enable --now docker
Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.
[root@master ~]# systemctl status docker

■Docker 컨테이너 생성하기
이미지는 버전 단위로 존재, 다운로드 받을 때 버전을 지정하지 않으면 최신 버전을 다운로드
docker run 다음 name은 컨테이너의 이름을 정하는 것이다
Docker에서의 Tag = Version
