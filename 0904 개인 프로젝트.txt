■ 지금까지 배운 클라우드에 필요한 기술로 클라우드를 이용한 서비스나 어플리케이션의 구축 및 구현

● 아이디어 - 왜 이런 것을 구현하려고 했는지?(목적), 어떻게 구현할 것인지?(How), 구현한 이후 지속가능하게 하는 방법은 어떤 것이 있는지?
● SaaS 서비스를 이용한 서비스의 구현 및 구축
● AWS의 다양한 서비스의 조회 및 구현 공부
● 구현 결과물을 보여주는 방법의 결정(HTTP,HTTPS등 웹페이지로 구현하기 위한 python3등의 도구 사용 or 어플리케이션으로의 구현)

-EC2
-API 서비스 끌어오기. 오픈 데이터(정부 오픈데이터)

■퇴근길 안전한 귀갓길을 위한 cctv 어플 (ec2연동하고, api끌어오는 것은 지피티나 구글링)

-아키텍처를 스스로 구현하여, 고객들에게 배포해줄 수 있게 하는 기술을 습득하는 것이 목표(추후 프리랜서로 가는 발돋움이 될 것)
-중요한 것은 큰 그림으로 그려주고 목적과 어떻게 구현할 것인지 운영하는 데에 비용문제 등을 고려, 아키텍처를 구현하고(ppt)
-이번 주 이런 그림을 그리고 어떻게 할 것인지 15시 까지
-하고싶은 것을 먼저 생각하고, 법적으로 어려운 것들은 일이 닥치면 바꾸고 하는 식으로 갈 것
-구현 방법: 정부의 무료 CCTV API를 끌어와 핸드폰이나 웹의 GPS기능을 추가하고 버스 어플의 주변 정류장 찾기 처럼 사용자 주변 cctv의 위치를 검색하여
보여주게 하는 방법

-----
IDEA(생활방범 CCTV의 API를 가져오지 못 할 경우)
-https://www.localdata.go.kr/ 에서 CCTV말고 다른 정보들을 가져와 웹사이트에 구현
-https://www.data.go.kr/(정부 공식 데이터 사이트)에서 흥미가 있을 만한 데이터의 API를 따와 웹사이트에 구현
-웹사이트 구현에 성공했을 시 앱으로 개발을 해보는 것도 나쁘지 않을 것 같음(일단 웹페이지로 구현하는 것이 첫 번째 목표)
-세계뉴스들을 모아놓은 사이트들도 괜찮을 것 같다(국내 뉴스 뿐만 아니라 흥미가 없으면 찾아보지 않았을 세계뉴스, 국가단위나 주단위로 나누는 것도 좋을 것 같고
파파고나 구글 번역을 통해 여러가지 언어번역기능을 사용해 한국어로 변환 하는 것도 나쁘지 않을 듯 싶다.ex구글 docs의 한국어 변환 문서 같은 기능)

-----
AWS 추가 개념 설명

t2 시리즈의 문제점?
1. CPU 크레딧 제한
2. 네트워크 성능 제한
3. 메모리 용량 제한
4. EBS 최적화 미지원


Hyperthread의 개념:
인텔이 개발한 멀티스레딩 기술, 단일 물리적 CPU 코어가 두 개의 논리적 CPU 코어처럼 동작하도록 만들어, 각각의 코어가 독립적인 스레드를 동시에 처리할 수 있게 함
AWS에서는 EC2 인스턴스를 구성할 때 이 하이퍼스레딩 기능을 사
예를 들어, 't2.micro' 인스턴스 유형은 1개의 vCPU를 제공하는데, 이는 실제로는 하나의 물리적 CPU 코어에 대한 하이퍼스레딩을 활용한 것
하이퍼스레딩은 CPU 자원을 보다 효율적으로 활용할 수 있게 해줌
여러 스레드가 병렬로 실행되면서 한 스레드가 대기 상태일 때 다른 스레드가 실행되도록 함으로써 CPU 사용률을 극대화하고 전체 시스템 성능을 향상
-그러나 모든 애플리케이션이 하이퍼스레딩에서 이득을 보는 것은 아님, 일부 워크로드에서는 오히려 성능 저하를 초래
따라서 AWS EC2에서 제공하는 '무작정 적용하기' 옵션으로 원하는 경우에만 하이퍼스레딩 기능을 활성화하거나 비활성화할 수 있음

AWS CPU Buffrer Credit:
AWS에서 'CPU Credit'라는 개념은 주로 T2 또는 T3 인스턴스 유형에서 사용,추가적으로 CPU 크레딧을 사용하여 일시적으로 높은 CPU 성능(버스트 성능)을 제공

Placemet Group
(EC2 인스턴스를 물리적으로 가까운 위치에 배치하는 전략을 설정하는 기능, 네트워크 지연 시간을 최소화하고, 높은 네트워크 처리량을 제공하기 위해 사용)

-Cluster Placement Group:
이 그룹의 인스턴스들은 같은 AZ(Availability Zone) 내에서 서로 근접하게 배치, 낮은 지연 시간과 고성능 네트워크 처리량(10 Gbps 이상)을 얻을 수 있음
HPC(High Performance Computing)애플리케이션과 같이 많은 네트워크 트래픽을 주고받는 애플리케이션에 적합

-Partition Placement Group:
이 그룹의 인스턴스들은 하나의 AZ 내에서 여러 파티션으로 분할되어 배치,
각 파티션이 별도의 하드웨어에 위치하므로, 하나의 하드웨어 실패가 전체 애플리케이션에 영향을 미치지 않음
대규모 분산 및 복제된 워크로드를 실행하는 경우(예: Hadoop, Cassandra 등)에 적합

-Spread Placement Group:
이 그룹의 인스턴스들은 각각 다른 하드웨어에 배치, 각 인스턴스가 독립적인 장애 도메인에서 실행되므로 단일 장비 문제가 전체 시스템에 영향을 주지 않음
고가용성이 필요한 작업부하나 중요한 애플리케이션 데이터베이스 등에서 사용할 수 있다