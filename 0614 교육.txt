■jupyter notebook이 실행이 되지 않는다면, 구글에 코랩을 검색하여 구글에서 제공하는 편집기를 이용할 수 있다
주피터에서 할 수 있는 작업의 99%(거의 모든 작업)을 할 수 있다
단점 : 12시간이 지나면(AFK상태)사용 할 수 없다(주피터 노트북이 실행되지 않을 때 대안으로 생각하면 좋다. 깊게 생각하지는 말자)

cmd창에서 pip list명령어로 python의 기본적으로 제공하는 도구들을 볼 수 있다

변수에 대입되는 값의 형태 : 자료형(문자, 숫자, 논리, 리스트, 딕셔너리 등)
-변수에 담는 값의 형태가 자료형이라고 이해하면 된다, 변수안에는 여러 값들로 이루어진 자료형들이 있을 수 있다

■자료형의 종류
•숫자 자료형
int(), float()의 함수가 제일 중요

int():다른 자료의 형태를 정수로 변환
float():다른 자료의 형태를 실수로 변환

※%(나머지) 연산자 활용
-꾸준한 연습으로 익숙해져야 한다(안되면 식을 암기해서라도 익혀야 한다)

ex)초를 시간과 분으로 변환하기
sec = 3703
시 = sec // (60 * 60)
분 = (sec % (60 * 60)) // 60  # 시간만큼 제외 후 분 계산
초 = sec % 60
# 포맷팅 f문자
print(  f'{시}시 {분}분 {초}초'  )

•문자 자료형
*indexing : 1개 글자 추출(조회) [인덱스]
*slicing : 여러 글자 추출(조회)   [시작인덱스:끝인덱스]

1. 찾기 - find()
2. 개수 - count()
3. 변환 - replace(), maketrans() + translate()
4. 잘라내기 - [] 슬라이싱, split()
5. 합치기 - join()
6. 전체 길이 - len()

■자료형 List*
-List : 대괄호 []로 표현된다, 쉼표 , 로 각각의 요소를 구분 한다
이해하기 어렵.. 변수[0][1] 등으로 확인하며 이해하도록 하자
파이썬에서 값이 나오지 않으면 변수만 출력하던지, print(변수)를 입력하여 출력하는 기본적인 방법을 잊지말자
※파이썬은 형태가 다른 자료형은 연산할 수 없다(숫자+숫자 = 가능, 숫자+문자 = 불가능)

append : 변수에다 값을 넣는 것과 다르게, 변수에다가 바로 추가한 값을 넣어주는 동작방식이다(반드시 변수.append()로 동작한다, = 표시가 없다)
del 변수[값] : 변수의 값을 제거하는 명령어(인덱스로 삭제 []), 
변수.remove(값) : 변수의 값을 제거하는 명령어(인덱스로 삭제하는 것이 아닌 변수의 실제 값을 삭제 ()로), 요소 중에 한 개
변수.pop() : 변수의 마지막 값을 제거하는 명령어, 여러 번 실행할 수 있으며 그 때마다 제거한 값의 마지막을 계속 제거 해준다

자료구조 중에서 Stack에서 사용되는 용어
pop / push

List 관련 함수 (함수를 부르면 값이 나온다)
count() : 
index() : find()는 LIst에서 사용할 수 없어 index()로 찾는다
sort() : 정렬(오름차순), sort(reverse=True)를 입력하면 내림차순으로 정렬해준다

■자료형 Dictionary*
-기본적으로 {key:value, ... }로 구성된다
-순서라는 개념이 없다, 순서를 따져서 사용 할 거면 List를 사용하면 된다
-key값은 일반적으로 문자로 하는 것이 좋다 (Tuple, Bool, 숫자로도 표현이 가능하지만, 문자로 해라)
● Dictionary 사용
- dict1 = { } 또는 dict1 = dict()
- dict2 = { 'name' : 'ggoreb' }
- dict3 = { 'name' : 'ggoreb', 'age' : 20 }
- dict4 = { 'name' : 'ggoreb', 'age' : 20, 'hobby' : ['당구', '배드민턴'] }
- dict5 = { 'name':'ggoreb', 'age':20, 'hobby':['당구', '배드민턴'], 123:456 }
리스트 처럼 딕셔너리 안에 딕셔너리가 들어갈 수도 있다
변수에 키를 넣으면 수정, 키가 아니면 추가
ex)키 = a
dic['a'] = '추가' > 키 a를 수정
dic['b'] = '추가' > 키에 b를 추가

-get() = dic['키']로 밸류를 확인할 수 있지만, 키가 존재하지 않으면 에러의 위험성이 커서 dic.get('키') 명령을 쓰는 것을 추천한다 - 존재하지않으면 아무값도 뜨지
않는다
-in = 키가 존재하는 지 확인 ( '밸류' in dic )

ㅁbaekjoon online judge <- 코딩 테스트 문제들 사이트(연습하기에 좋다), 출처 - 한국정보올림피아드에서 연습가능(낮은난이도로연습)

ㅁ주피터 노트북에서 셀의 좌측 파란색 상태로 c, v를 순서대로 누르면 그 셀을 복사한다

■set(중요하진 않지만, 겉핥기)
set은 index로 추출하지 못하고, 딕셔너리 처럼 키 밸류로 뺄 수도 없다.
{값1, 값2, 값3, .... }의 표현 방식을 쓰지만 딕셔너리 처럼 키:밸류로 표현하지 않는다.
-중복된 값을 제거하기 위해 사용된다
set의 특징만 그냥 기억하자
set에도 순서가 없어서 정렬을 하고 싶으면 list로 변환한 후 sort()로 정렬을 해야 한다

■제어문
-논리합 (x^y) : and 조건 - 둘 다 만족하는 조건일 때만
-논리곱 (xvy) : or 조건 - 둘 중 하나만 만족해도 나온다

1. 조건
 - if

2. 반복
 - while
 - for

3. 진행 (크게 중요치 않다)
4. 멈춤 (크게 중요치 않다)

조건문 사용 시 주의사항
경우의 수가 많은 조건식은 가장 아래에 작성