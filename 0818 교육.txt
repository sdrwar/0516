ㅁmod_ssl: http를 https로 암호화 시키기 위한 ssl 설치 도구?(http+ssl = https)
ㅁvar-total.yaml 중간의 files/.htaccess의 .디렉토리는 숨김의 의미
ㅁvar-total.yaml을 ansible-playbook으로 실행했을 때 오류가 났었던 이유:  Ansible이 로컬에서 .htaccess 파일을 찾지 못했음
-해결:  vim files/.htaccess으로 files 밑에 .htaccess(인증방법을 지정하는 방법)을 추가하여
AuthType Basic
AuthName "Basic Authentication Test"
AuthUserFile files/htpasswd
Require valid-user
라는 줄을 추가한다

ssh-copy-id -i ~/.ssh/id_rsa.pub konan@servera

실습
---
usermod -aG wheel konan으로 /etc/group에서 nana를 추가했던 것처럼 konan을 wheel에 추가시켜 sudo로 root 권한을 사용할 수 있게 한다

/etc/hosts는 퍼블릭 아이피로 넣어준다 (기존의 control은 aws로 같은 네트워크 안에 있어 프라이빗 아이피로 ssh나 ping을 할 수 있었지만, 이번에는
vmware로 실습하기 때문에 각 인스턴스의 퍼블릭 아이피를 넣어줘야 통신을 할 수 있다)

.ssh 권한은 chmod 700 .ssh 권한 설정해야 퍼미션 디나이드가 뜨지 않는다

vim known_hosts에서 serverb가 master IP와 동일하면 그 행렬을 지워준다
---
ㅁyaml파일에서 아파치가 되었든지 nginx가 되었던지 firewall에 예외 서비스 등록하기 위해서는 http로 해야 인식을 한다(프로토콜 문제)
      firewalld:
        service: http
        permanent: true
        state: enabled
        immediate: yes

■chapter 7. 호스트 패턴 사용
-병렬사용은 패스, 중요한 것은 호스트 패턴(기호를 사용해 제외, 다집합, 합집합, 교집합 등의 조건을 추가할 수 있다)
-vim host/inventory의 node101의 순서는 서버 a~c의 프라이빗 아이피 나머지 밑 2개는 a,b순서대로
-ansible all -m ping -o를 테스트 하기 위해서는 host 디렉토리로 들어간 후 테스트를 해야 제대로 node101같은 결과를 볼 수 있다
(절대 경로가 다르면 기존에 있던 디렉토리의 inventory파일을 참고하여 ping을 보내고 값을 얻기 때문에 servera.example.com과 같은 결과로 나온다)
-전체 호스트의 핑 테스트와 달리 두 그룹 이상의 호스트 테스트를 할 때에는 따옴표(')를 입력하고 범위를 지정해야 오류가 나지 않는다
-쉘 명령 패턴에 따라 콜론(:)이나 기타 특수 문자들은 대부분 인터프리터, 파이프 라인 또는 환경 변수 연산에 사용되기 때문에
문자열을 따옴표로 감싸서 쉘이 해당 문자들을 해석하지 못하게 해야한다
- -o: --one-line의 약어로 출력을 간결하고 읽기 쉽게 나타내준다

ㅁ2.반복문 및 조건문 사용
-기본적으로 item이라는 변수는 loop를 찾는다
-우분투는 클라이언트 시장에서는 많이 쓰이지만, 서버 시장에서는 레드햇과 센트os를 많이 쓴다
-우분투가 설치할 수 있는 프로그램도, 쓸 수 있는 종류도 다양하다
-조건변수 실습에서 when-exam2.yaml의 ansible_distribution는 fact 변수라 yaml파일에 지정을 해주지 않아도 적용이 가능하다
-ignore_errors: ansible은 task들을 순차적으로 실행하지만, ignore_errors를 사용하여 앞선 작업이 실패하더라도 다음 작업을 실행 가능하게 끔 할 수 있다

■Handler 정의 및 구현
-notify와 handler의 관계 및 동일 값 작성, handlers는 task 가장 마지막에 작성

■에러 처리
• ignore_errors
• force_handlers
• failed_when
• changed_when
• any_errors_fatal
• max_fail_percentage
• block, rescue, always
중 ignore_errors와 block, rescue, always는 자주 쓰이고 중요한 에러처리 문법이다
ㅁ block, rescue, always
-block과 rescue는 반대의 개념이고, always는 둘의 성공 실패 여부와 상관없이 항상 실행

프로젝트 관련
ㅁIAC: ansible과 테라폼을 의미
-aws사용도 코드로 구현..? 코드이용해서 ec2, vpc 생성 등(코드 구성할 때 ansible이나 테라폼등을 사용

■ansible roles(기존에 배운 ansible과 조금 다르다, 구조나 개념등)
-include_role: role에서 가져온다는 의미
-접속할 때 보여지는 파일 /etc/motd
ㅁmotd roles
ㅁvhost roles
-lab 8-1-2의 롤 생성 중 
ServerAdmin admin@{{ ansible_fqdn }}
ServerName {{ ansible_fqdn }}
ErrorLog logs/{{ ansible_hostname }}-error.log
CustomLog logs/{{ ansible_hostname }}-common.log common
DocumentRoot /var/www/vhosts/{{ ansible_hostname }}/의 내용 중 
앞의 서버어드민, 서버네임, 에러로그, 커스텀로그,다큐멘트루트는 버추얼호스트
-버추얼 호스트: 웹서버는 하나인데, 도메인이 여러개(아파치 서버의 내용 중 하나이다)
-vhost-role 실습 시 role 디렉토리 안의 inventory, ansible.cfg 파일을 복사했는지 확인 하고 없으면 cp ../inventory . 명령어로 복사하기
ㅁansible-galaxy
-init: 초기화
-platform EL: EL 엔터프라이즈 리눅스
- -p roles/ : -p 설치가 될 경로