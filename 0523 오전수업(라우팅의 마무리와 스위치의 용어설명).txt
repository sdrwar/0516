ㅁCISCO IOS
-enable password로 enable 비밀번호 설정은 했었고, 원격으로 접속할때도 따로 패스워드 설정해야 한다.
-인터페이스 설정도 기억하기 (ex. interface serial number->int serial 0/0 접속 후 해당 인터페이스 설정)
*라우팅 명령어 사용시, 명령어 한줄 한줄이 중요하다. 라우터간의 연결을 끊거나 다른 쪽으로 연결해줄 수 있기도 하고 아예 셧다운을 시킬 수
있으므로 중요하다.

라우터에는 HDD가 없기때문에 메모리를 NVRAM에 저장을 한다. 
-RAM에 있는 설정 값을 NVRAM에 저장하기 위한 명령어: copy running-config startup-config
running-config (RAM에 설정된 세팅값) NVRAM: startup-config()

ㅁ수동 라우팅 세팅의 문제
-끊긴 라인도 그냥 간다.
-입력한 라우터 주소가 서로 동일 하면, 머물다가 사라질 수 있다.
-어디가 끊겼는지 알수가 없고, 라인을 추가할때마다 전에 연결했던 라인에 다 알려줘야 하는 수고로움이 든다.

ㅁstub network (가장 마지막에 있는 네트워크)

ㅁ디폴트 라우트 
-ip route 0.0.0.0 0.0.0.0 우리라우터 ip주소를 입력을 하여, 어디든 갈 수 있게 하는 네트워크.
-디폴트 라우트를 이용하여, 상대방 라우트 주소를 입력하여 네트워크 간의 연결을 할 수 있다.

ㅁ0.0.0.0 /0 10.0.0.1 <-> 0.0.0.0 /0 10.0.0.2의 스터브 네트워크끼리의 연결이라고 했을때, 디폴트 네트워크를 이렇게 설정했을때 문제점?
-TTL 값이 0이 될때까지 루핑, 제자리 돌기를 할 수 있다. (다른 8.8.8.8의 네트워크로 연결하려고 했을경우)
-쓸모없는 트래픽들이 넘쳐난다.
해결법: 한쪽은 반드시 정확하게 ip주소를 적어두어야 한다(한쪽만 스태틱 형식으로)
ex. 0.0.0.0 0.0.0.0(/0) 10.0.0.1 <-> 192.168.0.2 255.255.255.0(/24) 10.0.0.2

ㅁ스위치
-전통적으로 L2장비, 내부가 페브릭(직물) 구조로 되어있다. A-B가 보낼때 C-D도 연결할 수 있다. 동시에 연결을 할 수 있다.
*Hub: 하나에 하나씩만 연결한다. 여러 장비들이 신호를 보내면 충돌이 일어난다.
-맥어드레스를 이용해 서로간의 구분을 할 수 있다.(IP를 보는 방식으론 비싸기에)
-트랜스패런트(투명한브릿지): 투명하게 아무것도 볼 수 없고, 아무 변형도 하지 않는다(맥어드레스를 알기위해)
가만히 지켜보는 장비, 프레임을 보내더라도 맥어드레스를 알려고 하지않고 가만히있는다.
하지만 맥주소는 스위치 내에서 저장한다. (맥어드레스의 소스(보내는)맥을 저장한다.)
소스 맥이 어디에 있는지 저장한다. 한줄 한줄 기록하는 방식 (몇번 포트에 무슨 PC가 있는지 맥주소를 저장한다.) 
:맥테이블 맥어드레스테이블에 저장
-하지만 포트에 있는 맥주소를 다 알게 되면, 다른 포트와의 연결을 원활하게 해준다.

핵심적인 동작방식(https://hihighlinux.tistory.com/95)*최초에는 허브처럼 동작하나, 
1. Learning (맥주소를 저장한다, 소스맥어드레스-발신 포트의 주소)
2. Forwarding/Filtering (받은 포트를 제외한 포트로 신호를 뿌린다/다른 포트면 연결해주지 않는다.)
3. Flooding (맥어드레스 테이블에 없는 신호가 잡히면 모든 포트에 신호를 뿌린다)
-Unknown unicast Broadcast uni Multicast uni에 대해서는 받은 포트를 제외한 나머지 포트로 Flooding

L2 switch
-처음에는 IP없이 사용하였으나, 관리목적의(management)IP를 부여해 관리 목적으로 사용하기 시작했다.(Managed switch)
--MultiLayer switch(MLS): 라우터에 스위치를 넣은 스위치

L3 switch: L2스위치와 L3라우터를 결합한 스위치, 대규모 네트워크에서 효율적인 데이터 전달과 경로결정을 하는데 유용하다.
-ToR switch: Top of Rack 랙의 맨 윗단에 넣은 스위치(2개)-서버를 추가/삭제할때 위에다 꼽으면 된다. 추가/삭제가 용이하다
-EoR switch: End of Rack 랙의 맨 아랫단에 넣은 스위치-서버의 추가/삭제가 용이하지 않다.
-MoR switch: Middle of Rack 랙의 중간단에 넣은 스위치

-네트워크 스위치를 단계별로 나누는 방식
1. Core Layer (가장 상단에 위치하는 중요 스위치, 인터넷으로 연결하여 건물과 건물을 연결해 줄 수 있는 스위치)
2. Distributed Layer (코어레이어와 엑세스레이어를 연결해주는 중간 스위치, 가장 핵심적인 장비, Backbone장비)
*관리를 외부에서도 해야하니 Managed switch이기도 하다.
약 300개의 포트가 있고 밴드위스가 20G이상 된다.
3. Acccess Layer (PC를 직접 엑세스 하는 하위 스위치) 약 24개의 포트가 있고 Bandwidth가 1G정도 된다.

-스위치의 목적, 역할, 위치에 따라 불리는 용어들이 추가된다. 하나의 Access 스위치로 부르지 않고 매지지먼트, ToR스위치도 추가해서
부른다.

SoHo(Small office Home office, 약 300만, 집이나 사무실같은 작은 규모에서 사용하는 네트워크 환경)
Campuse enterprise(대학교, 기업, 정부기관과 같이 대규모조직에서 사용되는 네트워크)
Datacenter(대규모 데이터의 저장및 처리를 위한 장비, 약 2000만)등등의 네트워크 구성 용어들도 있다.