■하이브리드 클라우드와 온프레미스 프라이빗 클라우드의 차이점(0627 햇깔린 개념)

하이브리드 클라우드와 온프레미스 프라이빗 클라우드의 차이점은 아래와 같습니다:
1. 구성: 하이브리드 클라우드는 공용 클라우드(예: AWS, Azure, Google Cloud 등)와 프라이빗 클라우드(온프레미스 또는 호스팅된)를 결합한 구조
반면, 온프레미스 프라이빗 클라우드는 기업 자체 데이터센터에서 완전히 관리되는 클라우드 환경입니다.

2. 자원 공유 및 관리: 하이브리드 클라우드에서는 공용 클라우드와 프라이빗 클라우드 간에 데이터와 애플리케이션을 이동하고, 
자원을 가용성에 따라 할당합니다. 반면, 온프레미스 프라이빗 클라우드에서는 데이터 및 애플리케이션을 기업의 데이터 센터 내에서만 관리합니다.

3. 확장성: 하이브리드 클라우드 환경은 비즈니스 요구에 따라 유연하게 자원을 확장하거나 축소할 수 있습니다.
온프레미스 프라이빗 클라우드는 추가적인 인프라 투자 없이 확장하기 어렵습니다.

4. 비용: 하이브리드 클라우드는 공용 클라우드의 비용 효율성과 프라이빗 클라우드의 보안 기능을 결합합니다. 
온프레미스 프라이빗 클라우드는 초기 투자 비용이 높고, 지속적인 유지 관리 비용이 듭니다.

5. 보안 및 규정 준수: 온프레미스 프라이빗 클라우드는 보안 및 데이터 규제 준수에 대한 완전한 통제권을 기업에 제공합니다. 
하이브리드 클라우드에서도 프라이빗 클라우드를 통해 보안을 유지할 수 있지만, 데이터 이동 및 자원 공유에 따른 위험 요소가 존재합니다.

따라서 하이브리드 클라우드와 온프레미스 프라이빗 클라우드는 두 가지 서로 다른 클라우드 컴퓨팅 모델입니다. 
기업의 고유한 요구 사항, 비용, 보안, 규제 준수 등의 요소를 고려하여 어떤 모델이 가장 적합한지 결정할 수 있습니다.

■0628 복습

서브네팅: 네트워크를 나누는 것(네트워크 분할)✔
멀징 / 인터그레이션: 네트워크를 합치는 것(네트워크 병합 / 통합)✔
슈퍼네팅: 서로 다른 네트워크들을 하나의 큰 네트워크로 합치는 방법

네트워크를 병합 하면 호스트ID는 줄어들고, 네트워크ID는 늘어난다

※파이썬과 리눅스는 자주 써봐야 하고, 리눅스의 상대경로 절대경로로 명령어 연습도 해야 한다
내가 원할 때 원하는 작업을 할 수 있을 정도로(윈도우처럼 사용감에 익숙해져야 한다)
※많이 보고 많이 써보고..
참고 유튜브: 한빛미디어 리눅스 검색(최근 일자)
Linux: Raid 여러 개의 독립적인 디스크 드라이브를 하나의 논리적 단위로 묶는 기술, 데이터 안전성과 디스크 성능 향상을 위한 것
LVM의 용어 설명과 개념도 알아두기 
※알고있는 명령어만 이용하지 말고 -i | grep, -a | grep 등의 다양한 방법으로 조회 복사 이동 등의 기본명령어 연습해보기

참고 유튜브2, git등: 생활코딩, 노마드코더, 얄팍한 코딩사전

NoSQL의 개념 다시: 관계형 데이터베이스(RDBMS)가 아닌 다른 형태의 데이터 저장 및 관리를 위한 접근 방식
고정된 테이블 구조를 요구하지 않아, 유연하고 확장성 높은 데이터 저장 구조를 제공
확장성이 중요한 웹 애플리케이션, 마이크로서비스 아키텍처,시간 데이터 처리 등 다양한 상황에서 사용될 수 있다

Q. 가상 메모리를 69p 할당하면 성능 저하되지 않는지, 73p 표 이상한듯
-시스템OS에서 사용할 메모리의 나머지를 가상 메모리로 할당, 하이퍼바이저 같은 경우는.. 뭐라고 하셨는데 이해를 못함
-73p표 이상한 것 맞음, 디테일이 아쉬운듯

※TIP.
-백준 사이트에서 코드 테스트 문제 풀어보는 스터디 해보기(예전에 강사님이 알려준 사이트, 메모장에 적어둔 것 있을 듯)
-프로그래머스(가장 코테랑 비슷), 코드업(기초추천) <코드업-프로그래머스-백준으로 난이도 업 시키기>
-자격증도 알아보기

[Chapter 3]
■클라우드를 실현하는 기술들
•가상화: 하드웨어 리소스(CPU, 메모리, 스토리지)를 논리적으로 다룰 수 있게 해주는 매커니즘
•컨테이너: 애플리케이션을 실행하기 위한 영역(이 사용자 공간을 컨테이너라고 부름)을 여러개로 나누어 사용할 수 있다.
•분산처리: 대량의 데이터를 여러 서버에 분산하여 동시에 병렬로 빠르고 효율적으로 처리하는 기술

■서버 가상화 기술
 - 하나의 물리적 서버 리소스에 여러개의 서버 환경을 할당하고 각각의 환경에 OS와 애플래케이션을 실행할 수 있게 만들어 주는 것
ㅁ3종류의 서버 가상화 기술
•하이퍼바이저 형: 하이퍼바이저라는 가상화 소프트웨어를 동작시키고, 그 위에 Linux와 Windows같은 여러개의 OS를 가동시키는 형태
(여러 개로 나누어진 각 서버의 처리능력은 물리서버보다 떨어진다. 
대표적인 제품으로는 VMware vSphere, MS의 Hyper-V, 시트릭스의 Xen, Linux의 KVM)
•호스트 OS형: 호스트OS와 호스트 형 가상화 소프트 웨어, 게스트 OS가 들어간다.
•컨테이너 형: 호스트OS와 컨테이너 관리 소프트웨어는 들어가지만, 게스트 OS는 없다

■컨테이너 기술
 - 애플리케이션의 실행 영역(유저 스페이스)을 여러개로 나누어 사용하는 기술, 호스트 OS입장에서 보면 하나의 프로세스로 볼 수 있다.
 - 애플리케이션의 실행 환경을 가상화 하는 것으로 이해해도 좋다
 - 가상 서버는 기동에 수십 초에서 수 분이 걸리지만 가상화에 따른 오버헤드가 적으므로, 빠르게 기동/정지할 수 있으며 성능 저하도 거의 없다
 - 대표적인 컨테이너 타입 가상화 소프트웨어로는 Docker사가 개발한 Docker가 있다

■분산 처리 기술
 - 데이터를 여러 개의 서버로 나누어 병렬 처리, 가격의 부담을 줄이면서 대량의 데이터를 고속으로 처리하는 것이 가능
 - 대표적인 소프트웨어로는 Apache Hadoop, Apache Spark가 있다

■데이터베이스 기술
•RDB
 - 여러 개의 데이터를 행과 열이 있는 표 형식으로 표현하여, 복잡한 데이터의 관계를 처리할 수 있도록 만든 데이터베이스
•NoSQL
 - RDB와 같은 관계형 데이터베이스가 아닌 데이터베이스를 뜻하는 용어
 - 대량의 데이터를 고속으로 처리하는 분산 데이터베이스
▶마이그레이션: 만들어 둔 데이터를 다른 환경으로 이전 시키는 것

■스토리지 기술
•블록 스트리지
 - 일정한 크기의 블록으로 나뉜 스토리지의 논리 볼륨을 블록단위로 엑세스 할 수 있는 스토리지
•파일 스토리지
 - 파일을 그대로 읽고 쓸 수 있으며 공유할 수 있는 스토리지
 - Windows OS의 SMB(Server Message Block), Samba, CIFS와 UNIX및 Linux의 NFS, NAS
•오브젝트 스토리지
 - 데이터를 객체 단위로 처리(데이터를 담으려면 버킷이 필요하다)
 - 데이터를 올릴 때도 받을 때도 외부로 받기 때문에, HTTP로 기반이 되어있다

■IaaS를 위한 오픈 소스 클라우드 기술
 - OpenStack으로 대표되는 오픈소스 클라우드 기반 소프트웨어
 - VMware 다음으로 많이 쓰고 있는 OpenStack이다
 - NASA에서 독자적인 클라우드 기반인 'Nebula'가 그 바탕이고 클라우드 사업자인 RackSpace와 공동 개발을 했지만 오픈소스로 완전히 공개 되었다
 - 표준 언어는 Python, 표준 외부 API는 독자적인 API로 REST API(HTTP기반), Amazon EC2/S3를 호환, 표준 OS는 Ubuntu Linux

■PaaS를 위한 오픈 소스 클라우드 기술
 - 대표적인 소프트웨어로는 Cloud Foundry, OpenShift가 있다

■네트워크 가상화 기술
•VLAN
 - 하나의 물리적인 네트워크를 여러개의 논리적인 네트워크로 분할하는 기술
•VPN
 - 가상으로 전용선과 같은 사설망을 연결하는 기술, 연결할 때에는 IPsec이라는 프로토콜이 사용된다.
 - IPsec을 이용하여 통신하면 통신 거점 인증, 통신 데이터의 암호화가 이루어 지므로 거점간의 안전한 통신을 구현할 수 있다(터널링)
 - IP를 포함해 암호화를 하므로 새로운 IP주소를 덧씌워 인터넷으로 나간다.
•NFV
 - 네트워크 기능을 소프트웨어로 구현시켜 가상 서버위에 구축하는 기술

■SDN
 - Software Defined Networking
 - 네트워크를 가상화하고 네트워크 구성과 기능 설정 등을 소프트웨어로 프로그래밍 할 수 있게 만들어 준다

■엣지 컴퓨팅 
 - 서버를 스마트폰 등의 말단 디바이스에 가까운 영역(엣지 쪽)에 분산 배치하고, 그 서버에 말단 디바이스가 보낸 데이터를 처리하는 컴퓨팅 모델
 - 실시간 데이터 처리와 높은 신뢰성이 요구되는 상황에 적합
 - 공장 생산 라인의 기계 제어나, 자율주행 자동차, 지도 데이터등의 실시간 처리에 낮은 지연율로 데이터를 처리하는 엣지 컴퓨팅의 활용이 필수적이다

■하이퍼 컨버지드 인프라스트럭처
•컨버지드 인프라
 - 서버와 네트워크, 스토리지, 소프트웨어등을 하나의 패키지에 통합한 제품을 뜻한다
•하이퍼 컨버지드 인프라
 - 소프트웨어 기반의 서버와 네트워크, 스토리지 등의 구성요소가 통합된 제품

■GPU
•CPU
 - 연산을 담당하는 코어를 여러 개에서 수십 개만 가지고 있지만, 지속적인 조건 분기가 많은 복잡한 명령을 순차적으로 실행하는 능력이 뛰어나다.
 - 복잡한 프로그램의 처리에 적합
•GPU
 - 수십에서 수 천개나 되는 코어로 같은 작업을 여러 개의 코어에 할당하여 병렬 처리를 할 수 있기 때문에 많은 양의 간단한 계산을 하는 능력이 뛰어나다
 - GPU는 많은 양의 간단한 계산이 요구되는 딥러닝에 적합
 - 활용분야: 자율주행 자동차/제조, 바이오 헬스케어, 기계학습/딥러닝

■데이터 센터
 - 위치로는 지진이나 해일 등의 위험이적고, 지반이 딱딱한 장소가 적합, 내진/면진 설계된 건물
 - 표준 데이터 센터의 PUE는 1.8~2.0정도이다

■서버리스 아키텍처
•마이크로 서비스 아키텍처: 하나의 애플리케이션을 작은 서비스의 집합체로 구축하는 방법, 개별 서비스들이 API와 같은 간단한 방법으로 연계/동작
•서버리스 아키텍처: 기업 사용자나 개발자는 마이크로서비스로 구성된 서비스의 각 컴포넌트를 조합하고 기본적으로 API로 연계하므로 
독자적인 애플리케이션 개발/서비스 개발/시스템 구축이 가능. 이 때의 클라우드 서비스가 풀 매니지먼트(환경 구축 및 보안패치 백업, 검색 등을 모두
클라우드 사업자가 수행)인 경우 사용자는 서버의 존재를 전혀 의식 하지 않은 상태에서 애플리케이션을 동작 시킬 수 있다. 이 것을 서버리스 아키텍처라고
부른다. 서버리스 아키텍처르 채용한 클라우드 서비스를 FaaS(Function as a Service)라고 부른다
AWS에서는 풀 매니지먼트를 완전 관리형 이라고 부른다.

※API의 개념 중요(96p)

[Chapter 4]
■클라우드를 도입하는 목적을 명확히 한다
•경영 효율성 향상: 경영의 효율성 향상에 도움이 되는지를 확인할 필요가 있다
•비용 절감: 어느 정도의 비용을 절감할 수 있는가, 투자대비 효과가 있는가를 확인하여 검토하는 것이 좋다
•업무 과제의 해결 및 업무 프로세스의 개선: 고객 서비스의 대응 속도 개선, 출시 속도 개선 같은 과제에 대한 해답이 될 수 있는지 확인하여 검토
•직원의 시스템 이용 환경 개선
 - 얼마만큼의 직원 간의 협업강화 효과가 기대되는가, 고객과의 협력 강화 효과가 기대되는가, 파트너와의 협업 강화 효과가 기대 되는가를 검토
 - 직원이 고객에게 정보를 제공할 때 / 파트너 사의 서비스 연계 및 공급망을 구축 할 때

■클라우드를 도입할 때의 추진 체제
•프로젝트 추진자의 역할: CIO(최고 정보 책임자)등의 IT부서 책임자가 클라우드 도입 프로젝트의 추진자를 임명하고, 그 추진자의 주도 아래 도입
(마이그레이션)계획부터 프로젝트 관리까지 담당
•프로젝트 추진자는 CEO(최고 경영자), CFO(최고 재무 책임자)등의 경영진에게 경영적인 측면, IT보안적 측면, 재무적 측면에서 설명할 필요가 있다

■클라우드로의 이행과제를 정리한다
■도입에서부터 자사 시스템 최적화까지의 로드맵
 - 클라우드 서비스의 장기적인 확장을 고려한 로드맵 예시
1. 정보 시스템의 표준화
2. 서버와 스토리지의 통합 / 서버 가상화
3. 클라우드화
4. 네트워크의 적정화: VPN을할지, 어플리케이션 암호화를 할지
5. 클라우드와 클라우드의 연계, 클라우드와 온프레미스의 연계(하이브리드 클라우드화)
6. 기업 그룹 전체 시스템의 최적화

■클라우드로 변화하는 IT부서의 역할
•지금까지의 기업 사용자의 정보 시스템은 ERP와 같은 기간 시스템과 사내 업무 시스템처럼 사전에 예측된 정보량을 처리하는 시스템이었다.
이를 SoR(System of Record: 기록을 위한 시스템)이라고 한다.
정상성, 안정성, 내구성등의 요구사항을 만족하면서 클라우드로 마이그레이션 되고 있다.
•정보시스템은 IoT와 인공지능 Fintech, 마케팅 자동화 등의 새로운 비지니스 기반으로서의 역할이 요구되고 있다.
이러한 목적을 가진 시스템을 SoE(System of Engagement: 사람이나 물건에 관여하는 시스템)이라고 한다
정보 처리량과 부하를 사전에 예측할 수 없는 경우가 많으며, 사업 자체의 전망도 예측 할 수 없다. 그래서 리소스를 빠르게 조달할 수 있으며
유연하게 확장할 수 있는 클라우드 서비스를 이용하고 API를 활용한 자동구축 자동운영이 강점인 클라우드에 최적화된 시스템이 요구되고 있다
(신속성, 유연성, 확장성에 중점)

■클라우드 서비스에 대응하는 각종 애플리케이션
•트레디셔널 애플리케이션
 - 기존 시스템 및 개별 서버에서 운영 및 관리, 가상 서버의 라이센스를 지원하지 않는다
 - ITIL(IT Infrastructure Library)에 의한 운용 관리

•클라우드 대응형 트레디셔널 애플리케이션
 - 설계 사상은 트레디셔널 애플리케이션과 같지만, 클라우드 사업자의 클라우드 서비스에서 구축 및 운용할 수 있는 애플리케이션

•클라우드 네이티브 애플리케이션
 - 클라우드 서비스에서의 이용을 전제하여, SoE에 따른 API를 기반으로 설계된 애플리케이션
 - API를 활용한 애드온(확장기능)개발도 쉽고 개발 및 운영이 하나가 된 DevOps도 가능하다.

■클라우드 사업자를 선정할 때의 고려사항
■클라우드 인티그레이터에게 의뢰하기
■온프레미스 시스템에서 클라우드로의 마이그레이션
•경영진이 요구되는 조건과 클라우드의 도입시기, 실현 항목의 우선 순위 등을 확정
•자사의 시스템 전체 정책을 책정하여, 시스템 구성의 설계 및 전체 일정을 수립
•동시에 이 모델을 도입했을 경우 TCO(Total Cost of Ownership, 총 소유 비용), ROI(투자대비효과)를 검토하는 등 실현 했을 때의 효과를 검증

■클라우드를 적재적소에 사용한다
•클라우드로 마이그래이션이 가능한 시스템, 불가능한 시스템
 - 사용자의 이용횟수가 적은 기존 업무 시스템, 공장 시스템에 일체화된 생산 시스템등은 클라우드 서비스로의 전환이 어려운 경우가 많다.

■하이브리드 클라우드의 구성
■하이브리드 클라우드의 다양한 연계
■하이브리드 클라우드 운용 관리의 일원화
■개발과 운영의 통합(DevOps)
•DevOps란 Development(개발)과 Operation(운영)이 함께 협력하여 완성도 높은 소프트웨어를 더욱 신속하게 만들어가는 문화
•이목이 쏠리는 배경으로는 개발방법, 클라우드, 자동화라는 3가지 요소를 들 수 있다.
•서비스의 전체 그림 안에서 결정된 부분을 먼저 개발해서 배포하는 개발 속도 우선적인 방법을 취한다.
•애플리케이션의 테스트 환경을 확장해야 하거나 IT인프라를 바꿔야 하는 상황이 자주 발생하므로 개발자 스스로 서버와 스토리지를 생성하거나
OS또는 미들웨어의 설정을 바꾸는 경우가 늘어나고 있다.
•개발할 내용을 작게 쪼개고 그것의 구현과 테스트를 반복해가면서 전체 시스템을 개발해 나가는 방법을 애자일(agile)이라고 함
•운영부서에서는 클라우드의 도입으로 서버 환경을 조달하는 부담이 줄어들었기 때문에 운영 담당자가 서버의 설정 등을 대신하게 되었다
•철저한 자동화를 통해 많은 수의 서버를 소규모 인원으로 운용할 수 있게 되어, 운영 부서의 리소스를 개발 부서로 이전하는 움직임이 두드러진다.
※디지털 트렌스포메이션(126p)