파이썬 하기 전 미니 프로젝트
완성할 수 있는 사이즈로 프로젝트 토론 (큰 그림이 아니어도 좋다)

질의 응답 답변
PF와 FK의 질문
-기본키 외래키 정의 : 기본키가 숫자면 외래키도 숫자여야 한다(외래키는 기본키와 동일하게 따라간다)

NULL관련 답변
-is NULL, in not NULL의 기호는 쓰이지만, =NULL의 기호는 쓰지 않고 되지도 않는다

DB (DB는 원래 계정이어야 한다, 하지만 지금은 root 최고관리자권한으로 아무 계정이나 접속해 여러작업을 하고 있다), DB : 3tier??
-DDL : DB를 전문적으로 다루는 사람들이 쓰는 명령어, 하지만 구조는 대충알아야 한다
-DML* : 조작, CRUD(입력, 조회*, 수정, 삭제)
-DCL : 저장, 복구, 계정들에게 최고관리자급의 권한을 줄 수도 있고, 조회만 할 수 있게 하는 명령어, 이 것 역시 DB를 전문적으로 다루는 사람들이 쓴다

group by : 통계를 낼 때 주로 쓰이는 절

join(join 속성-외래키) : join, outer join

--연습문제 풀이 중
마리아 db의 기본 값은 대소문자 구분 X (테이블의 열들 같은 경우)

select 절 사용 시 c.countris_name, l.location_id 같이 해당 테이블의 구문도 붙여주자

join 속성 연결 표현 시 선 1개는 기본키 선 3개는 외래키 (1:N, N:1 구분 가능)

점선 : 1:N 관계에서 주로 볼 수 있는 비 식별관계(외래키로 쓰여졌을 때 누군인지 식별 불가), 데이터가 여러 개라 단 하나를 찾지 못하는 것 처럼
부서이름이라는 1과 사원번호라는 N의 관계 같은..

실선 : 1:1 관계에서 주로 볼 수 있는 식별 관계(외래키이면서 기본키, 정확하게 1개만 찾을 수 있다), 찾아보기 힘들다(품질보증서 = 제품 같은 관계)
-N:N 관계 - 나의 입장에서도 아무거나, 상대 입장에서도 아무거나의 관계(택시, 버스, 공유자전거 등의 예시)

■join.pdf의 outer join 설명
 outer join : 데이터가 연결이 되지 않아도 일단은 연결을 해준다 (12page 참고)
left와 right로 누구를 보여줄 것이냐를 정할 수 있다

1:1 관계일 때, 중간에 매칭되는 매칭 테이블을 두어 용량을 절약 시킬 수 있다
ex,
매뉴 테이블(1)
1 - 햄버거
	
매칭 테이블
1 - 1
1 - 2
	
매장 테이블(1)
1 - 롯데리아
2 - 버거킹

데이터 베이스의 [6]subquery_update_delete.pdf 중 1장 설명

서브쿼리는 DB의 부하를 준다
ex) select 속성 리스트 from 테이블 where 테이블.컬럼 (select 속성 from 테이블 where 테이블.컬럼 = 값);
하지만 직관적이다

여러 개를 = 안에 넣으면 안된다(where shop_id = 64, 65 같이.. 하나만 넣어야 한다)
where address like '%기장%'; 같은 결과를 나타나게 된다.(모든 '기장'이라는 결과값을 나타내게 한다)
= ();, in (); 을 써야한다 ()안에 조건문을 넣어야 한다

Join 절은 데이터 통합과 성능 개선에 강점을 가지고
서브쿼리는 유연성과 재사용성에 강점을 가지고 있다

▶서브쿼리를 사용하여 조회하는 경우의 장점과 단점:

•장점

유연성: 서브쿼리는 쿼리 안에 쿼리를 넣어 사용할 수 있기 때문에 다양한 비교 연산자와 함께 유연한 조건을 지정할 수 있습니다. 
이를 통해 복잡한 데이터 검색 및 필터링이 가능합니다.

재사용성: 서브쿼리는 독립적인 쿼리로 작성되므로 다른 쿼리에서도 재사용할 수 있습니다. 
서브쿼리를 변수화하거나 뷰로 정의함으로써 코드의 중복을 피할 수 있습니다.

•단점

성능 저하: 서브쿼리는 부가적인 쿼리로서 실행될 때 성능 저하가 발생할 수 있습니다. 
서브쿼리가 복잡하거나 대량의 데이터를 처리해야 할 경우 성능 문제가 발생할 수 있습니다.

가독성과 유지보수성: 서브쿼리를 사용하면 쿼리의 가독성이 저하될 수 있습니다. 
복잡한 서브쿼리를 다룰 때는 코드의 의도를 파악하기 어려울 수 있으며, 유지보수가 어려울 수 있습니다.

▶Join 절을 사용하여 조회하는 경우의 장점과 단점:

•장점

데이터 통합: Join 절을 사용하면 두 개 이상의 테이블을 연결하여 데이터를 통합할 수 있습니다. 
이를 통해 관련된 데이터를 한 번에 조회하고 분석할 수 있습니다.

성능 개선: Join 절은 데이터베이스 엔진이 최적화된 실행 계획을 수립하여 데이터를 효율적으로 처리할 수 있도록 도와줍니다. 
인덱스를 활용하고 조인 알고리즘을 선택하여 성능을 개선할 수 있습니다.

직관적인 쿼리 작성: Join 절을 사용하면 관련된 테이블 간의 관계를 직관적으로 표현할 수 있습니다. 
이로 인해 쿼리의 가독성과 유지보수성이 향상됩니다.

•단점

복잡성: Join 절은 두 개 이상의 테이블을 연결하므로 쿼리의 복잡성이 증가할 수 있습니다.
복잡한 Join 조건이나 다중 조인을 다룰 때 실수할 가능성도 높아집니다.

성능 저하: Join 절은 데이터의 양이 많고 복잡한 Join 조건을 처리해야 할 경우 성능 저하가 발생할 수 있습니다.
특히, 잘못된 Join 조건이나 인덱스가 없는 경우 성능이 저하될 수 있습니다.
-
join / outer join
그냥 조인과 아우터 조인 설명

-join
equl join : = 기호를 쓴 join
non equl join : = 기호를 쓰지 않은 join(ex. where like, between 등) 
self join : 자기 자신과 join하는 join

-outer join
left : 왼쪽 테이블을 기준으로 오른쪽 테이블과 연결을 확인
>왼쪽 테이블의 모든 레코드를 포함하고, 만약 오른쪽 테이블과 매칭되는 연결이 없다면 NULL값으로 채워진 오른쪽 테이블의 컬럼이 반환(표시)
right : 오른쪽 테이블을 기준으로 왼쪽 테이블과 연결을 확인
>오른쪽 테이블의 모든 레코드를 포함하고, 만약 왼쪽 테이블과 매칭되는 연결이 없다면 NULL값으로 채워진 왼쪽 테이블의 컬럼이 반환(표시)
아주 가끔 full(마리아DB에서는 쓸 수 없다)
-
•join으로 할 수 있는 것은 서브쿼리로도 되고 서브쿼리로 되는 것은 join으로도 표시 된다(대부분)
-
insert / update 사용 시 주의사항
>기존에 있던 데이터를 변경시키는 작업을 하기 때문에 어떤 데이터를 변경시킬지 지정하지 않으면, 모든 데이터들을 변경하기에 정말 중요하다

-
데이터베이스 설계를 위한 exerd 다운로드 후 설치
데이터 베이스 7번 pdf 내용 (스샷으로 4번 슬라이드 내용 작성 기록)

exerd 프로그램을 이용하여 DB만들기 실습(개인용으로 쓰는 것은 무료라고 함, 기업은 유료 exerd.com)
- erd 파일 생성
1. 프로젝트 (폴더)
일반프로젝트
2.파일생성
exerd
3. 대상 mysql


설계
1. 테이블 생성
2. 논리/물리 설계
동시 표시 옵션 체크

화면EXERD 탭쪽을 더블클릭하면 확대/축소 할 수 있다
테이블 상단 탭을 더블클릭하여 이름을 변경할 수 있다

보통 물리이름은 영어 / 논리이름은 한글
프로그램 내에서 대부분의 이름 변경은 더블클릭으로 할 수 있다
-
도메인은 신경 쓰지 않아도 된다(넣을 수 있는 값이 없다 현재는)
F4-F5번으로 테이블의 물리/논리 모드를 변경하여 테이블의 이름을 수정할 수 있다
데이터 타입은 모르겠으면 INT(정수) 지정
실습 중 잘못한 작업이 있으면 ctrl+z로 되돌리기 가능

새 컬럼 추가 ctrl+enter - tab으로 옆으로 넘기기 가능 (shift+tab으로 전 단계로 돌릴 수 있다)
NULL허용 비허용은 NULL을 더블클릭하면 바꿀 수 있다

-출결 관리 DB 만들기 연습 중
실습 중 숫자 2가 붙는건 어쩔 수 없고 나중에 수동으로 수정해도 된다