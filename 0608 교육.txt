DB와 Python을 가르쳐 주실 김남현 강사님 010-8478-8182 (질문 같은 것은 톡으로 주는게 편하다고 함, 용건은 짧고 간단하게)
ex)어디의 누군데, 뭐가 안되요O, 안녕하세요 강사님 저는 어디의 누구인데 ~, 안되는 것 같아요 이렇게 할까요?X

수업 내용 올라오는 사이트: ggoreb.com/cloud

꾸준한 연습이 중요/넓게보기(점차 넓게 사용법 익히거나, 다른 언어들도 익혀보기)

데이터베이스 - MariaDB
파이썬과 추가로 Flask(웹서비스를 만들 수 있다, 프로젝트를 위해 알려주신다고 함)

프로젝트
1. 웹서비스(기본)
2. 2 Tier or 3 Tire (PC의 갯수나 가상 머신의 갯수에 따라 나뉘는 듯함, PC 한대로 하는 작업을 1 Tire라고 함)

DBMS(Database Management System): 자격증에 나올 법한 내용들
-정보처리기사
-SQLD
-ADsP
취득 시도는 할 만하다.

DB=사용자/암호

DB를 사용하는 이유? 공유를 하기 위해
DB시스템의 단점: 많은 비용(설치와 유지보수등에 천문학적인 돈이 들어간다고 함), 전문 지식(DB에서 사용하는 언어를 익혀줘야 한다, SQL같은.. SQL만 중요!)
개발자: SQL언어가 중요, 몇 명의 공유가 가능한지 등등은 신경 쓰지 않아도 된다. 주요기능 중 조작이 중요하다.
관리자: 주요기능의 제어까지 다 할 수 있어야 한다.

-수업 내용의 중요도는 조작

DDL: 정의어 (뭔가를 하기 위한 준비과정) [ex. create]
*DML: 조작어 (뭔가를 하기 위한 도구, 툴) - 조회, 수정등은 실제로 연습하는 것이 중요하다.
DCL: 제어어

MariaDB도 DB라고 하고, 설치한 DB들도(world, city같은 생성한 DB들과 원래 설치되었던 mysql등등)도 DB라고부른다. 용어 혼용 생성한 DB에서 만든 것: table
하나의 DB는 보통 하나의 계정으로 생성한다. kor 계정 생성 후 kor DB 생성 같이..(권한을 주어 다른 팀 들과 같이 공유할 수 있다)

Excel과 database는 비슷하지만, 일부 기능들에서는 차이가 난다.
정형 데이터: database
비정형 데이터: Excel

■Key
-데이터를 정확히 찾아내기 위한 고유한 값: Key(어떠한 상황에서도 무조건 하나의 데이터로 찾을 수 있는 것)
(모든 데이터는 반드시 Key를 가져야 함)

Key는 하나의 정보로 찾을 수 있는 경우도 있지만, 여러개의 복합적인 정보로 이루어진 Key도 존재한다.
기본키와 외래키 개념
기본키에서도 
단일키(PK)와 복합키 개념이 존재.
-Primary Key(단일키)

외래키
-Foreign Key: 어디선가 쓰여지는 기본키도 외래키로 쓰여질 수 있다, 데이터의 효율성을 위해서 외래키를 쓰게 되었다. 다른쪽에서도 사용되는 기본키
(여러가지를 할 수 있는 키 - 하기위해 꼭 필요한X), 어디에 위치해 있는 지에 따라 기본키와 외래키를 구분 해야한다.
Candidate Key (후보키): 기본키로 선택될 수 있는 컬럼
Alternate Key (대체키): 기본키로 선택되지 않은 컬럼
Super Key (수퍼키): 여러개의 컬럼을 묶어서 고유한 값으로 사용되는 복합키

1:N 방식? N에는 외래키가 온다?.. 데이터의 관점에서는 강의실1이 기본키이고, 들어오는 수강생들은 강의실1을 갖고 있는 외래키
엑셀을 이용해 연습하다 보면 뭐가 1에와야 하는지 뭐에 N이 와야하는지 파악할 수 있다

-데이터베이스에서는 존재하지 않는 후보를 외래키로 가져올 수 없다.
-기본키로 존재해야 외래키로 쓸 수 있다(기본키를 삭제하려면 외래키로 존재할 수 없다)

NULL = 정보가 없다는 뜻이 아니라, 아무 것도 없다는 값이다.(당연히 기본키로 사용 할 수 없다)
NULL을 허용하겠다 하면, 해당 항목의 데이터의 누락을 허용하겠다라는 말(N: 널 허용/N.N: 널 허용안함)

ERD 내에 점선으로 연결되어 있으면 외래키로 연결되었다는 뜻이다

메모장에 UTF-8로 저장할 때 영어는 1바이트, 한글이나 알 수없는 글자는 3바이트로 저장되며
ANSI로 저장할 때는 한글이나 알 수 없는 글자는 2byte로 저장된다

기본키로 지정이 되면, 색인 작업이 자동으로 시작된다(목차 정렬, 순서 정렬 등등과 비슷한 작업) 그러므로 VARCHAR데이터 유형으로 저장하는 것은 추천하지
않는다(데이터베이스가 힘들어 한다, 옳지 않는 방법)

이름 뒤에_no를 넣으면 숫자로 표시한다는 뜻이지만 반드시 숫자만 올 수 있는 것은 아니다 (A123, Z000등의 코드들도 올 수 있다)

추천 사이트: https://www.w3schools.com/ : 다양한 언어들의 소개 및 배울 수 있는 사이트

DML에서 나오는 4가지 기본 명령어 (설계를 할 줄 알아야 데이터에 대한 관점이 높아진다)
CRDL (SQL에서는 세미콜론 ; 으로 문장의 끝을 정한다, 대소문자를 구분하지 않지만 table의 이름은 대소문자를 구분하기 때문에 table을 추가/제거할 땐 대소문자 구분을 해야한다) 
-Create
-Read
-Drop
-

속성명(이름),

CHAR - 고정 길이 문자열(5개로 지정해두면 1글자를 넣어도 5개의 용량을 차지한다)
VARCHAR - 가변 길이 문자열(5개로 지정해도 1글자를 넣으면 1개의 용량을 차지한다)

쿼리 실행시 현재 커서 위치에서 현재 쿼리 실행, 
드래그 하여 실행하는것은 선택 실행

HeidiSQL 사용 시 테이블 같은 것을 접었다 폈다 할 때 더블클릭을 하면 엉뚱한 텍스트가 쿼리에 추가가 되니 클릭으로 열고 닫자

기본적으로 외래키는 기본키와 명칭이 똑같아야 한다.

DML에서 가장 중요한 명령어는 select (다른 명령어들 처럼 명령 값이 정해져 있지 않고(규칙이 없고)
다른 명령어를 추가하여 다른 select 명령어로 실행될 수 있어 중요)
*select는 규칙이 없어서 중요* : 보조해주는 명령어들이 많다

insert 구문에서 [(속성 리스트)]의 설명 중 대괄호는 생략이 가능하다

select 속성의 이름, 속성 리스트, from 테이블 리스트; <-기초적인 select 구문

데이터베이스에서 가지고 있는 기본 명령어는 파란색으로 표시, 스페이스 하면 대문자로 표기된다.
만약 쓰여진 명칭 그대로 입력하고 싶다면 `(숫자 1왼쪽에 있는 백틱)을 입력하고 `닫아주면 된다 --backtick이란 주석까지 넣어준다
ex) select * from table; - 동작이 되지않지만, select * from `table` --backtick을 입력하면 table이라는 테이블 리스트를 표시해준다

select 구문에서 * 전부검색은 추천하지 않고 select 고객아이디,고객번호,이름 from 고객; 같은 상세 명령으로 하는 것을 추천한다
distinct는 전체 구문에서 중복체크를 하여 중복 제외하고 출력해준다
select 단가,단가 from 제품; 같이 이름을 두 번 넣어도 출력이 두 번 된다

from이 없다면 가져올 데이터의 장소가 없기 때문에 입력한 결과 값만 표현해준다

select 구문을 입력할 때 명령어 구문이 아니라 상수 값을 입력하면 (ex.7 + 3) 상수 값만 출력이 되고 from에서 나타낼 수 있는 값까지만 출력이 된다
(from 고객이라고 하였을 때, 고객이 7명이면 7개까지만 상수 값이 표현이 된다)

튜닝용으로 상수 값을 입력하기도 한다(성능을 알아보기 위해?.. 이해 못함)
ex, select 1 from 고객, 고객이름, 주문, 제품;

조건에 해당하는 데이터를 검색할 때 쓰는 구문 where
select from where 오는 순서-암기 (where는 from 다음에 와야 한다)

AND 구문이 OR 구문보다 우선순위가 더 높다

OR 구문과 Between 구문은 pdf파일을 보고 실습해보기 (+like 구문) : 근데 이건 전에 다 했던거라 실습하면서 감 찾으면 될듯

heidi sql 에서는 테이블의 긴 이름을 적을 때 ctl+space로 쉽게 찾을 수 있다

오름차순 내림차순을 할 때 읽어나가는 방향에서 큰 순서인지 낮은 순서인지 파악하는 것이 중요.

asc(어센딩), desc(디센딩)의 축약어

데이터 조회 시 어떤 식으로 조회할 것인지 지정해주는 것이 중요(데이터 상에서는 작성한 순서대로 정렬이 되어 자동으로 asc가 되지 않은 상태이다)

ascii table 때문에 대문자 A가 소문자 a보다 작아 오름차순을 했을때 소문자 a가 위로 보이고 숫자가 더 코드에서 더 작은 값으로 되어 있어
오름차순으로 했을 때 가장 위에 표시된다

데이터 조회 Select
1. select
2. from
3. where
 ┎3-1. between, and (둘 다 같은 뜻)
 ┞3-2 in, or (둘 다 같은 뜻)
 ┖3-2 like
4. order by

as 구문을 쓸 때 '', "", ``를 쓰지 않아도 정상적으로 작동은 되지만, 공란이 생기면(스페이스) 오류가 뜨기 때문에 공란을 대비하여 ''같은 구문을 쓰는게 일반적이다

limit 구문에서 시작을 1이 아니라 0으로 하는 것은 외워야 한다 (마리아DB에서는)
1페이지=1, 2페이지=11, 3페이지=21, ~ 187페이지=1861...
계산 방식: 페이지 숫자x10-9=보여주고자 하는 페이지 값

franchise_store_mysql 실습
매장과 현재 위치의 거리 계산하기
1. 매장의 위도/경도
2. 현재 위치의 위도/경도 (패스트 레인의 위도/경도: 37.4844676069296 / 127.035697374817)-뒷 자리 몇 개씩은 빼주자
3. 계산식-구글검색

잘 돌아가는 코드를(데이터를) 내 입맛에 맞게 수정하여 사용해보자 (3번 같은 경우 특히)
사용하다가 내 입 맛에 맞게 편집하려고 구글검색 같은 방법을 통해 점점 내 것으로 만들기

4번째 pdf
함수는 항상 소괄호를 가진다.
함수에 어떤 값을 넣느냐에 따라 결과물이 다르다 (ex 전자렌지 사용법)
함수는 원하는 값을 넣어야 결과물이 나온다(숫자,문자,날짜 등의 종류에 따라 넣어야 하는 함수들이 달라진다, 전용 함수 개념?)
학습을 시켜놓고 써먹는 개념으로 함수를 사용??

어떤 함수를 쓰든지 많이 써버릇해야 한다. 틀려도 좋으니 계속 넣어봐야 한다
-넣어야 할 것, 넣지 말아야 할 것(숫자함수에 날짜를 넣는등의 실수)구분해서 넣어보기

함수 연습 시에는 select ;안에서 연습 (from을 쓰지 않고 함수를 넣고 데이터에 "asdwqrqw"같은 큰 따옴표 안에 넣어서)

db의 insert시에 날짜에 %나 /를 넣어야 한다(따로 날짜를 구분해줄 수 있으면 %건 /건 상관없다)