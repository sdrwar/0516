AWS 자격증 관련 조언, 어소시에이트 자격증? 클라우드 어소세이트? 프로페셔널은 난이도 전문가 수준

신입으로 입사지원을 하면 너무 높은 자격증은 딱히 필요가 없다
(신입으로 오는 지원자가 너무 높은 자격증을 취득했다면 의심이 가고 실력이 허수로 분류될 수 있다)

■ AWS 데이터베이스 
ㅁRDS를 이용한 데이터베이스 서버 구축하기
• 파라미터 그룹 생성하기
 1.  AWS 서비스에서 RDS를 검색하여 대시보드로 진입 -> 데이터베이스 생성
 • 표준 생성과 손쉬운 생성
 표준 생성: 사용자가 옵션을 하나씩 골라가며 생성하는 옵션
 손쉬운 생성:  권장 모범 사례 구성을 생성하는 옵션
 2. 표준 생성을 선택 후 MariaDB로 실습 -> 엔진 버전 기본값 -> 템플릿은 프리티어 선택 -> 설정의 DB인스턴스 식별자는 기본으로 쓰고
 자격 증명 설정의 마스터 사용자 이름(root)도 admin 그대로 쓴다 -> 마스터 암호도 설정(admin1234)하고 -> 인스턴스 구성도 기본값, 스토리지도 기본값으로 둔다
 연결의 컴퓨팅 리소스는 EC2 연결 선택 -> 어제 만든 myvpc01-web01선택, VPC도 만들어 둔 VPC 생성 -> DB서브넷 그룹 자동생성으로 선택
 -> vpc 보안그룹 기본값, 인증 기관도 기본값, 모니터링도 체크하지않음 -> 데이터베이스 생성
 생성된 database-1을 클릭하여 연결 & 보안 탭을 보면 엔드포인트가 이 인스턴스의 주소이다.(admin의 계정으로 접속을 하면 접속이 될 것이다)
 *database-1와(과) EC2 인스턴스 i-00ff416be7a28de7a  간의 연결을 설정하지 못했습니다.의 오류문구가 뜨긴하는데 딱히 설명이 없었다*
 cmd창을 열고 해당 인스턴스에 접속을 해보자
 점프서버를 구축했기 때문에(.ssh 폴더 안에 config 파일로) ssh web01로 접속을 하면 바로 접속이 된다.
 뭔가 실습을 하고 sql도 했는데 듣지 못함..어제 삭제를 해서 복구하느라 못따라감. 근데 만든 데이터베이스 삭제를 하라고 함....
 
 파라미터 그룹으로 들어가 파라미터 그룹 생성 -> 교재대로 디비8.0으로 선택 -> 그룹이름 생성 후 파라미터 생성
 옵션 그룹에서 그룹 생성 -> 교재대로 이름생성 설명 간단히, 엔진 mysql 버전은 8.0 선택 후 생성
 서브넷 그룹으로 들어가 생성 -> 서브넷 추가 전 까지 동일한 방식으로 입력 -> 서브넷 추가에서 사용하고 있는 가용영역 2개를 선택(a,b,c중 만든 것)후 생성
 서브넷은 vpc의 서브넷 탭을 새 탭으로 열어서 프라이빗 서브넷에 해당하는 아이디를 선택해준다 (ex. subnet-0c028f941265d571d)
 (퍼블릭 서브넷을 서브넷 그룹에 추가하면 외부에 공개된 서브넷에 직접 db가 위치하므로 보안상문제가 발생하기 떄문에 기본적으로는 퍼블릭서브넷을 
 서브넷그룹에 추가하지 않는다)
 RDS의 데이터베이스로 들어가 데이터베이스 생성 -> 표준 생성 -> 교재대로 mysql 선택하고 버전은 v8번대 선택하고 프리티어 -> 식별자 이름 생성해주고
 마스터 자격자 admin 마스터 암호까지 설정 후 컴퓨팅 리소스 부분 연결 안함 -> vpc는 생성한 것으로 선택 -> 서브넷 그룹도 만들어 둔 서브넷 그룹 선택
 퍼블릭 엑세스 아니오 -> 모니터링 밑의 추가 구성을 펼쳐 DB 파라미터 그룹과 옵션 그룹을 생성했던 그룹으로 선택을 하고 데이터 베이스 생성
 (데이터베이스 인증 항목은 나만 안나오는 거였는데, 아마 오늘 어제 지운vpc를 새로 생성하고 그래서 그런건가 싶다)
 cmd창으로 돌아가 ssh web01에서 sudo yum -y install mysql을 설치하고 mysql -u admin -p -h db주소, 비밀번호 입력으로 접속이 되는 것을
 확인할 수 있다(난 안되라)

■ 스토리지
• 스토리지 정의
 - 데이터를 저장하는 저장소의 역할을 수행하는 요소
• 스토리지 
 ㅁ DAS
• Direct Attached Storage
• 직접 서버에 연결하는 저장소
ㅁ NAS
• Network Attached Storage
• 스토리지를 네트워크로 연결
• 파일 기반 스토리지
ㅁ SAN
• Storage Area Network
• 별도의 스토리지용 네트워크를 구성(Fibre Channel)
• 블록 기반 스토리지

■ 데이터 백업 / 스냅샷
ㅁ 데이터 백업의 정의
 - 데이터가 손상되거나 유실괴는 것에 대비하기 위하여 데이터를 복사 후 저장
 - 백업이 필요한 주요 상황
• 하드디스크 손상
• 데이터베이스 또는 소프트웨어 손상
• 개발자 및작업자의 실수로 인한 데이터 유실
ㅁ 백업 위치
• 같은 장비 내 같은 저장장치
• 같은 장비 내 다른 저장장치
• 별도의 백업 저장장치

ㅁ스냅샷
 - 특정 시점의 데이터 저장장치의 상태를 별도의 파일 또는 이미지로 저장
 - 백업 데이터의 최신화가 보장되지는 않으나, 재해복구 및 긴급 복구 등에 유효
 - AWS EBS는 스냅샷을 통한 백업 및 복원, 리전 간 복사 등을 지원

■ Amazon S3
 - Simple Storage Service
 - 확장성이 뛰어나며 무한대로 저장 가능
 - 견고성이 우수함: 한 해당 99.999999999% 내구성 보장(나인일레븐 9/11)
 - 사용하는 만큼 비용 지불
 - 리전 내에서 유일한 '버킷(Bucket)'을 생성하여 데이터를 저장
 - 저장 기능을 활용하여 간단한 정적 웹 서비스 구현 가능
 - 파일 단위 접근 만을 지원 - EBS와 서비스 유형이 다름

ㅁ Amazon S3 주요 활용분야
 - 백업 및 복구: 뛰어난 내구성 및 확장성, 버전 관리 기능을 통한 데이터 보호
 - 데이터 아카이빙: 요구사항에 맞는 아카이빙 방식 제공
 - 빅데이터 분석을 위한 데이터 레이크: 빅데이터 분석용 저장소로 활용
 - 하이브리드 클라우드 스토리지: Amazon Storage Gateway를 통해 온프레미스 환경에서 클라우드 스토리지 활용, 데이터 백업 및 재해복구
 - 재해복구: 타 리전으로 복자
ㅁ Amazon S3 스토리지 클래스
 - S3 표준: 표준 저장소, 자주 엑세스 하는 데이터를 위한 무제한 저장소 99.99% 내구성 제공, 데이터 저장 암호화 및 SSL전송 지원
 - S3 표준: IA(Infrequent Access): S3표준과 같은 내구도 및 성능을 가지고 있는 99.9% 가용성 제공, 가격은 S3대비 절반 정도로 저렴
 - S3 One Zone - 
 - Amazon Glacier: 

AMI/Market Place
• AMI
 - Amazon Machine Image
 - EC2 인스턴스 생성에 필요한 템플릿 이미지
 - 사용자가 생성한 AMI를 통해 동일한 인스턴스 생성
 • Auto Scaling 등 자동화
 • EC2 인스턴스의 리전 간 이동

• Amazon Market Place
 - AWS에서 실행되는 소프트웨어 판매 및 구매를 위한 온라인 스토어
 - 다양한 카테고리의 소프트웨어 제공

■ S3 버킷 생성하기
1. 검색 창에 S3 검색 후 버킷->버킷 만들기 클릭
2. 버킷 이름(리전 안에서는 똑같은 이름의 버킷명이 있을 수 없기 때문에, 고유한 이름으로 지정)
3. 쭉 내려서 이 벜킷의 퍼블릭 액세스 차단 설정에서도 기본값.. 버킷 버전 관리 비활성화
4. 기본 암호화(교재와는 달리 23년 개정되어 기본적으로 업로드 되는 파일에 암호화가 기본 설정이다. 사용자는 복호화를 통해 보기 때문에 신경 쓸 필요 없다고 한다)
 암호화 유형도 기본값(Amazon S3 관리형 키) -> 버킷 만들기

ㅁ 버킷을 이용한 실습
1. 생성한 버킷을 클릭하여 객체 -> 업로드를 하여 파일을 올린다(파일 선택 또는 드래그 앤 드랍) -> 업로드를 눌러 업로드 성공 메시지 확인
2. 업로드 한 버킷을 클릭해 URL 주소로 접속하면 Access Denied 뜨는 것을 확인
3. 다른 탭에서 IAM 검색 후 대시보드로 접속
4. 사용자 메뉴 -> 사용자 추가 -> 이름 중복 되지 않게 IAM계정 이름을 넣고, AWS Management Console에 대한 사용자 액세스 권한 제공 체크
5. IAM 사용자를 생성하고 싶음 -> 사용자 지정 암호 -> 암호 입력 후 (사용자는 다음 로그인시 체크 해제) -> 다음 -> 새 탭에서 사용자 그룹 열기
6. 사용자 그룹으로 들어가 그룹생성 -> 권한 정책 연결에서 S3 검색 후 엔터 -> 아마존 풀 엑세스 -> 그룹생성
7. 사용자 목록으로 돌아가 그룹에 사용자 추가 -> 다음 -> csv 파일 다운로드
8. 다시 사용자를 클릭해 보안 자격 증명 -> 아래 액세스 키 -> 키 만들기 -> CLI 선택 -> 권장사항 확인 체크 -> 다음 -> 액세스 키 만들기
9. 액세스 키와 비밀 액세스 키를 따로 저장하거나 csv파일 다운로드(이 페이지를 벗어나면 액세스 키에 관한 정보를 얻을 수 없다)
10. csv파일을 다운 받거나 복사했다면 완료
ㅁ ssh web01로 cmd창에서 접속
 $aws configure를 입력하고 엑셀로 엑세스 키를 열어 키 아이디와 비밀키를 복사후 cmd에 붙여넣기
리전을 물어보는 창에는 자신의 리전명을 입력(ap-...), 아웃풋 포맷은 엔터로 넘긴다(포맷은 어떤 방식을 보여줄 것이냐는 물음인데 json으로 보여달라고 하려면
json을 입력하고 이런 식이다)

aws s3를 입력하면 도움말이 나오는데
[root@ip-10-0-23-82 ~]# aws s3 ls <- 버킷의 리스트를 보여준다
2023-07-13 02:45:05 aws-intro-sample-upload-hscho-20230713 (강사님꺼) 근데 내 버킷은 나오지 않았다

[root@ip-10-0-23-82 ~]#
[root@ip-10-0-23-82 ~]# echo "Hello S3" > hello-s3.txt
[root@ip-10-0-23-82 ~]# aws s3 cp hello-s3.txt s3://aws-intro-sample-upload-hscho-20230713/
[root@ip-10-0-23-82 ~]# aws s3 ls s3://aws-intro-sample-upload-hscho-20230713/
2023-07-13 03:05:42     511327 2735474F58DDE4210F.gif
2023-07-13 03:40:44          9 hello-s3.txt

※ 오전에 급하게 따라가느라 라우팅 테이블을 분리하지 않고 하나로 묶어서 사설 ip가 밖으로 나갔다가 돌아오질 못해서 나온 오류
프라이빗을 NAT게이트웨이로 묶으면 해결 된다고 함

※ VPC-라우팅테이블-생성-이름은 myvpc01-private01과 02로 2개 생성-vpc는 만들어 둔 vpc선택 후-라우팅 편집 0.0.0.0/0 nat게이트웨이 선택
nat게이트웨이 선택 시 서브넷의 이름을 보고 01과 02 각각 선택해서 넣어주기 (nat게이트웨이는 2개 생성한 상태였음)
-서브넷 연결로 들어가 서브넷 연결 편집-프라이빗01과 02를 각각 만들어 둔 라우팅테이블에 배치

cmd창에서 aws s3 ls하니 목록이 떴다

aws s3 cp hello-s3.txt s3://버킷아이디로(aws-intro-sdr-upload-230711) 업로드 한 후
업로드 메시지 확인 후
aws s3 ls s3://버킷아이디(aws-intro-sdr-upload-230711)로 제대로 올라갔는지 리스트 확인

반대로 s3에 있는 파일을 가져오기 하려면
aws s3 cp s3://버킷아이디/파일명 .(현재 디렉토리)
rm -rf .aws/ 명령어로 aws의 사용자 리스트를 삭제할 수 있다

ㅁ 액세스 키가 없는 상태에서 s3 접근하여 업로드 다운로드 하기
IAM 대시보드로 이동 -> 역할 -> 역할 만들기 -> AWS 서비스 선택 -> 사용 사례 ec2 선택 -> 다음 -> 권한 정책에 s3 검색 후 풀 액세스 선택 후 다음
역할 이름 알아보기 쉽게 ssg~_web입력 후 역할 생성
EC2로 이동 -> 인스턴스 -> web01 선택 후 작업-보안-IAM역할 수정 -> IAM 역할을 방금 만든 ssg~_web으로 선택 -> 업데이트

cmd창으로 이동하여 다시 aws s3 ls를 입력하면 전에 지운 aws사용자 목록이 나오는 것을 알 수 있다
(교재 161p 참고하여 실습)

■ 커스텀 도메인과 DNS 준비하기
• DNS 역할(Domain Name System)
 - 사람이 읽을 수 있는 도메인 이름을 실제 접속에 필요한 IP 주소로 변환
 - FQDN: Full Qualified Domain Name
• DNS 구성 및 체계
 - Root: 인터넷 도메인의 최상위 단계
 - 1단계 도메인(Top Level Domain, TLD): 루트 도메인 바로 아래 단계
 • 국가명 도메인(kr 등) + 일반 최상위 도메인(com 등)

■ DNS 동작에 대한 프로토콜 동작 원리
• DNS 동작 원리
 - 사용자의 요청은 DNS 서버로 전달
 - DNS 서버의 영역 레코드이거나, 서버의 캐시에 있을 경우 사용자에게 전달
 - DNS 서버가 알지 못하는 레코드일 경우 다음 중 하나를 수행
 • 다른 서버로 DNS 요청을 전달하는 재귀(Recursive)쿼리 수행
 • 직접 확인을 하기 위한 단계별 반복(Iterative)쿼리 수행
 - DNS 서버가 획득한 레코드를 사용자에게 전달

교재 172p 그림에 동작에 대한 그림 참조

- 정방향 존: 도메인 주소를 알고 접근하는 방법(호스트 이름을 해당 IP 주소로 변환하는 데 사용)
- 역방향 존: IP를 알고 접근하는 방법(IP 주소에서 호스트 이름으로 변환하는 데 사용)

■ Amazon Route 53
 - AWS를 통해 사용할 수 있는 클라우드 기반 DNS 서비스
 - Amazon EC2 인스턴스, ELB(Elastic Load Balancer), S3 Bucket 등의 연결정보 제공
 - 외부 서비스 연결 정보 제공
 - 다양한 부가 옵션 제공
 • 로드 밸런싱
 • 연결 체크를 통한 Failover 구성
 • 지연 시간 기반 라우팅
 • 가중치 기반 라우팅
 • 지역 기반 라우팅

ㅁRoute 53 실습(퍼블릭 영역 생성)
route 53 검색하여 대시보드 진입 -> 호스팅 영역 -> 생성한 도메인을 클릭하여 들어가 NS, SOA를 제외한 레코드들을 삭제 하고 호스팅 영역으로 돌아가 도메인
삭제 -> 호스팅 영역 생성 -> 구입한 도메인 이름 넣기 -> 퍼블릭 호스팅 영역으로 생성
생성한 레코드에서 아래 목록 -> 레코드 생성 -> 레코드 이름 bastion -> EC2를 새 탭에서 열기 ->
값에 Public 인스턴스 퍼블릭 IP를 복사하여 붙여넣기 -> 레코드 생성

cmd 창에서 nslookup bastion.구입한도메인.com (적용되는데 시간이 걸리기 때문에 바로 찾지는 못한다, 30분~하루정도 소요된다고 함)
>nslookup
>

ㅁ프라이빗 호스팅 영역 생성
생성 하기 전 VPC 항목으로 이동 -> VPC -> 만든 VPC ID를 클릭 -> 우측 작업 - VPC 설정 편집 -> 아래의 DNS 설정 - DNS 활성화 두개 다 체크 -> 저장
route 53으로 돌아와 호스팅 영역 생성 -> 실습을 위해 도메인 이름을 example.org -> 프라이빗 호스팅 영역 선택 -> 사용하는 리전과 VPC 선택 -> 생성

아래 항목의 레코드 생성 -> 레코드 이름 똑같이 bastion -> 값에는 public 인스턴스의 프라이빗 IP 등록 -> 생성 -> 다시 레코드 생성 -> 레코드 이름 web01 ->
web01 의 프라이빗 IP와 레코드 이름 입력 -> 다른 레코드 추가 -> 똑같이 web02 입력 -> 생성

cmd에서 ssh bastion으로 퍼블릭 인스턴스로 ssh 접속
$ nslookup bastion.example.org

Server:         10.0.15.2
Address:        10.0.15.2#53

Non-authoritative answer:
Name:   bastion.example.org
Address: 10.0.15.14

정상적으로 나오는 것을 확인

[ec2-user@ip-10-0-15-14 ~]$ nslookup web01.example.org
Server:         10.0.15.2
Address:        10.0.15.2#53

Non-authoritative answer:
Name:   web01.example.org
Address: 10.0.15.92

[ec2-user@ip-10-0-15-14 ~]$ nslookup web02.example.org
Server:         10.0.15.2
Address:        10.0.15.2#53

Non-authoritative answer:
Name:   web02.example.org
Address: 10.0.15.124

web01과 web02도 정상적으로 IP 나오는 것을 확인

윈도우 프롬프트에서는 bastion.example.org를 nslookup했을 때 정상적으로 나오지 않는다(정상)

■ 과제 실습
https://docs.google.com/document/d/1M5RBOcguGz23mgaboGZ1v8cOIbbhiP3YXvkOdaBkdlo/edit

과제
  다음의 조건에 맞도록 인프라 및 서비스를 구축하시오.
  내부에만 제공하는 웹 서버 int-web01, int-web02 에 로드밸런서를 사용하지 않고 적절한 부하 분산이 될 수 있도록 서비스 및 인프라를 구축하시오.
( VPC 내부에서 http://internal-portal.awsstudy.net/ 으로 접속시 int-web01, int-web02로 부하분산되어 접속이 되어야 함.)
  내부용 웹 서버는 외부에서 접근이 되지 않아야 한다.
  * 힌트 : IP 주소 수준의 로드 밸런싱

1. 로드밸런서를 사용하지 않고 로드밸런싱을 하라 (IP수준의 로드밸런싱)
2. 외부에서 접근을 못하게 하는 퍼블릭 서버 2개를 만들어라 (http접속을 허용하지 않는 보안그룹의 생성)
3. 도메인은 awsstudy.net
4. VPC는 만든 거 사용