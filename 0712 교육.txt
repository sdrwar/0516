■ 인증 (Authentication)
지식 기반 인증(Something You Know) : ID, PW 등
소유 기반 인증(Something You Have) :  스마트 폰의 앱(OTP) 등
자신의 존재기반 인증(Something You Are) : 지문 인식, 홍채 인식 등

■ Amazon VPC 의 주요 서비스
ㅁ 보안 그룹 / 네트워크 ACL(Network Access Control List)
 - IP와 포트를 기준으로 통신을 허용 및 차단하기 위한 기능
 - 보안 그룹
 • 인스턴스 레벨의 접근 규칙 설정: 인스턴스에 보안그룹을 적용하여 설정
 • 허용만 설정 가능
 • 반환 트래픽 허용
 - 네트워크 ACL(AWS의 가상 프라이빗 클라우드 (VPC)에서 서브넷 레벨에서 인바운드와 아웃바운드 트래픽을 제어하는 방화벽)
 • 서브넷 레벨의 접근 규칙 설정: 연결된 서브넷의 모든 인스턴스에 자동 적용
 • 허용 및 거부 규칙 설정 가능
 • 반환 트래픽에 대한 허용 설정 필요

■ VPC 피어링 연결
 - 서로 다른 VPC 간 트래픽 라우팅

■ 수동 생성한 VPC에 인스턴스 연결 (롱기스트 뭐시기 검색)
인스턴스 시작으로 인스턴스 생성->이름 생성->이미지 선택->특이한 내용 없이 기존과 동일하게 생성(보안그룹 생성 SSH만 체크했음)
명령 프롬프트로 SSH 접속
 - 수동으로 프라이빗 서브넷 생성하기
서브넷에서 퍼블릭은 15.0 / 15.32 두 개의 퍼블릭 서브넷 생성, 프라이빗은 15.64 / 15.96 두 개의 프라이빗 서브넷 총 4개의 서브넷을 수동으로 입력하여 생성
10.0.15.0/27, 10.0.15.32/27, 10.0.15.64/27, 10.0.15.96/27
 - 인터넷 게이트 웨이 생성->이름 지정 후 생성, 상단 메시지 VPC에연결(or 작업에서 vpc연결)

 - NAT 게이트웨이 수동으로 생성
NAT 게이트웨이->생성(교재대로 가용영역 당 1개씩 생성)->이름 생성->서브넷(퍼블릭 서브넷 선택, 햇깔리지 말기)->연결유형 퍼블릭->탄력적 IP(Elastic IP)
원래대로라면 탄력IP 생성 후 NAT 게이트 웨이를 해야하는데 교재에서 시키는 대로 NAT만들면서 탄력적 IP를 할당->생성(만들어 지는 동안 하나 더 생성, 2퍼블릭)

 - 라우팅 테이블 수동으로 생성(퍼블릭1, 프라이빗 서브넷 각1개 총 2개, total 4개의 라우팅테이블이 만들어 진다)
이름(퍼블릭), vpc선택 후 생성->이름(프라이빗1과 2), vpc선택 후 생성(프라이빗 2개), 총 3개 생성->생성된 라우팅테이블 선택 후 아래 라우팅->라우팅 편집
->퍼블릭rt에서 라우팅 추가->0.0.0.0/0, 인터넷 게이트웨이 선택->변경사항 저장
프라이빗rt->라우팅 편집->추가->3a프라이빗은 3a퍼블릭에 3b프라이빗은 3b퍼블릭 NAT게이트웨이 선택 후 고유이름 확인 후 저장
퍼블릭 라우팅 테이블 선택 서브넷 연결->명시적 서브넷에서 연결 편집->퍼블릭 서브넷 선택 후 연결 저장
프라이빗 라우팅 테이블 서브넷 연결 편집도 똑같이 프라이빗01은 3a, 02는 3b프라이빗 서브넷으로 연결

보안-보안 그룹으로 보안그룹 생성->이름, 설명 입력 후 vpc를 만들어 둔 vpc로 수정->ssh, Anywhere IPv4 선택 후 생성
똑같은 요령으로 웹에대한 보안그룹 http,https도 추가

■ 점프서버(bastion host)
 - 퍼블릭 서브넷에 위치해야 하고 공인IP를 가지고 있어야 한다.
생성해보기
EC2로 이동하여 인스턴스 생성->네트워크 설정 편집->만든 vpc 선택->서브넷 퍼블릭01->기존 보안그룹->ssh 보안그룹 선택->생성
cmd로 실행해보기

■ 웹서버
인스턴스 생성->(프라이빗01에 생성할 것이라서 퍼블릭 IP 할당 비활성화)->보안그룹은 기본 보안그룹 선택->생성(프라이빗02도 같은방법으로 생성)
-교재 103p에 있는 그대로 설정

퍼블릭 주소로 들어간 ssh에서 프라이빗으로 만든 웹서버로 접속하기
vi ec2-ssh-key.pem 으로 윈도우에 있는 키 파일의 내용 복사 붙여넣기 chmod 400 ec2-ssh-key.pem 해서 권한 읽기로만(권한이 많으면 ssh접속이 안될
수가 있다고 함, 키의 보안을 위해서)
ssh ec2-user@프라이빗 웹서버의 ip -i ec2-ssh-key.pem

기본값의 보안그룹에 ssh 접속이 되지 않아 인스턴스->웹서버 인스턴스 선택->보안->보안그룹을 새창에서 열고 인바운드 규칙 추가 ssh, Anywhere 저장

교재111p를 참고하여 다단계 연결 준비를 했다
다단계 연결 파일 설정을 메모장에 써주고 C:\Users\User 경로에 있는 .ssh 폴더 안에 config로 저장한다 (txt파일이 아닌 모든 파일로 해서 저장 후에 이름 바꾸기를
한 후 확장자를 지워준다) 키 파일을 복사하여 .ssh 폴더에 넣어준다
윈도우 cmd 창에서 ssh web01을 입력하면 다단계 연결이 되는 것을 확인 할 수 있다

■ 로드밸런싱
• 로드밸런싱 개념 이해
 - 네트워크 트래픽을 하나 이상의 서버나 장비로 분산하기 위한 기술
 - 소프트웨어 또는 하드웨어 방식으로 적용 - 로드 밸런서(Load Balancer)

• 로드밸런싱 방식
 ㅁ 라운드 로빈(Round Robin)
 - 현재 연결된 세션 수와 무관하게 순차적으로 연결 전달
 - 세션에 대한 보장 제공하지 않음
 ㅁ 해쉬(Hash)
 - Hash 알고리즘을 사용한 로드 밸런싱 방식
 - 클라이언트-서버 간 세션을 유지: 클라이언트가 동일 서버로 연결되도록 보장
 ㅁ 최소 연결(Least Connection)
 - 현재 연결된 세션 수에 따라 부하 분산
 - 세션에 대한 보장 제공하지 않음
 ㅁ 응답 시간 우선(Response Time)
 - 빠른 응답이 가능한 서버로 세션을 연결
 - 세션에 대한 보장 제공하지 않음

■ Amazon ELB
 - Amazon Elastic Lord Balancing
 - 단일 가용 영역 또는 여러 가용영역에서 네트워크 트래픽 분산
 ㅁ 부하분산 대상
 - EC2 인스턴스
 - 컨테이너
 - IP 주소
 ㅁ 세가지 방식의 로드 밸런서 제공
 - Application Load Balancer
 - Network Load Balancer
 - Classic Load Balancer
 ㅁ 로드밸런서 이용 효과
 - 애플리케이션 내결함성 확보
 - 원활한 부하 처리를 위한 분산 처리
 - 강력한 보안 서비스 제공
 ㅁ Free tier 사용시 클래식, 애플리케이션 로드 밸런서 750시간, 처리량 15GB 제공

■ 로드밸런싱 실습
로드밸런서->생성->ALB로 생성->스키마,아이피 기본->vpc 선택 후 서브넷 선택 후 퍼블릭 주소 같은 것으로 선택 두 가지 다->보안그룹은 web(elb로 생성
하려다가 web으로 만듦, http,https 보안그룹임)->기본과 elb를 선택 하고->대상그룹 만들기->인스턴스, 대상그룹이름설정->다음
web01,web02 체크 후 아래 보류중인 것으로 포함->대상그룹 생성
로드밸런서 생성 창으로 돌아와 리스너를 만든 대상그룹으로 선택->생성

퍼블릭 인스턴스로 ssh 하여 httpd를 설치 후 활성화 시키고 웹서버1로 ssh 하여 index.html을 생성(sudo로)

로드밸런서 세부 정보에서 dns이름 복사 웹페이지로 붙여넣고 이동
(대상 그룹 언헬시 뜨면 대상 등록 취소 하고 다시 등록, 웹서버를 구축(index.html)하고 나서 대상그룹을 만들었어야 했는데 구축하는 동안 대상그룹에서
테스트를 하다가 응답이 없어 언헬시로 뜬 것 같다) 삭제가 완료 된 것을 확인하고 다시 만들어보자

클래식 로드밸런서 만들기
로드밸런서 만들기에서 클래식 로드밸런서 만들기->ALB와 같이 세팅->인스턴스(타겟그룹을 지정하지 않고 직접 연결을 한다)->생성
DNS 이름을 복사하여 http://로 웹페이지를 열어본다

■ 데이터베이스
 - 여러 사람에 의해 공유되어 사용될 목적으로 통합하여 관리되는 데이터의 집합
 - 정보를 구조화하여 빠르고 효율적인 검색 및 갱신이 가능하도록 구성
 - DBMS를 통하여 관리됨: 일관성/무결성 보장
 - SQL을 통한 표준화된 접근 지원
 - 다중 사용자의 접근 지원
ㅁ 데이터베이스 트랜잭션의 안전한 수행을 위해 지켜야 할 원칙(ACID)
 - A: Atomic(원자성) 작업이 더 이상 작은 단위로 쪼개질 수 없는 ~
 - C: Consistency(일관성) 데이터 처리 방식이 일관되게 ~
 - I: Isolation(격리성) 
 - D: Durability(내구성) 

■ RDBMS 소개
 - Relational Database Management System
 - 데이터베이스의 데이터 간 사전에 정의된 관계가 있는 데이터 항목의 모음
