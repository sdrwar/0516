임소영 강사님
soyoung.lim2009@gmail.com
sylim@nobreak.co.kr
배울 책: 그림으로 배우는 클라우드, AWS로 시작하는 인프라 구축의 정석, 애저

-리눅스를 반복 연습 (기초적인것들, 디렉토리 이동같은 사소한것 이라도), 
리눅스를 이용해 워드프레스 작성을 했듯 리눅스를 이용해 클라우드를 구성?한다고 함

#클라우드의 기초
■SaaS ,PaaS, IaaS 등의 클라우드 서비스 모델에 따라 내가 관리해야 하는 것과 서비스 모델에서 제공하는 관리 영역이 다르다
•SaaS(Software as a Service) : 서비스로서의 소프트웨어
(하드웨어, OS, 미들웨어, 애플리케이션: 클라우드 사업자가 운용, 관리)

•PaaS(Platform as a Service) : 서비스로서의 플랫폼
(하드웨어, OS, 미들웨어: 클라우드 사업자가 운용, 관리)

•IaaS(Infrastructure as a Service) : 서비스로서의 인프라스트럭처
(하드웨어: 클라우드 사업자가 운용, 관리)

온프레미스 프라이빗 클라우드
클라우드 서비스를 이용하기 위해 온프레미스 환경을 구축

가상서버
가용영역 뜻 자세히 알기

windows 10 pro 같은 os의 경우 client, server는 server라고 표시가 되어있음
client는 한 번에 하나의 사용자만 이용 가능하기 때문에 원격으로 접속하면 기존 사용자는 사용하지 못하게 됨

[Chapter 1]
■클라우드 컴퓨팅이란?
-인터넷 너머에 존재하는 클라우드 사업자의 컴퓨터에서 처리하는 서비스
like 은행의 예금과 비슷한 개념, 입증된 클라우드 사업자에게 회사의 정보 자산을 맡겨 안전하게 운용하는 것

■클라우드가 탄생한 배경
-필요한 때 필요한 만큼 사용하는 클라우드 컴퓨팅 모델의 등장
-기업 사용자에게 컴퓨팅 자원을 셀프 서비스의 형태로 제공하게 되므로 서비스 제공의 효율성이 높아지고,  지속적인 매출을 올릴 수 있다는 점에서
안정적인 수익원이 된다는 장점이 있다.
1980년: 메인프레임
1990년: 클라이언트 서버
2000년: 네트워크 컴퓨팅
2010년: 클라우드 컴퓨팅

■클라우드의 정의와 특징
-NIST(미국 국립 표준 기술연구소)에서 정한 클라우드 컴퓨팅의 정의
•주문형 셀프 서비스(개별 관리화면을 통해 서비스를 이용)
•광범위한 네트워크 접속(다양한 디바이스를 통해 서비스에 접속)
•리소스의 공유(여러 사용자가 공유하는 형태로 이용)
•신속한 확장성(필요한 만큼 스케일 업과 스케일 다운이 가능)
•측정 가능한 서비스(이용한 만큼 부가되는 종량제)

■클라우드의 장점
•경제성: 사용하고자 하는 기간만 서비스로써 사용, 각자 관리하던 소프트웨어와 데이터를 클라우드에서 통합관리
•유연성: 컴퓨팅 리소스를 필요할 때, 필요한 만큼 확장 필요하지 않을 때에는 축소 가능
•가용성: 데이터 센터안의 일부 하드웨어에 장애가 발생하더라도 서비스를 계속해서 사용할 수 있도록 구성
•빠른 구축 속도: 클라우드가 제공하는 하드웨어와 소프트웨어를 이용하여 시스템을 신속하게 구축 가능

■SaaS, PaaS, IaaS의 특징
•SaaS: 소프트웨어의 업데이트 작업은 클라우드 사용자가 수행, 대표적인 SaaS 서비스로는 MS의 Office 365, 구글의 G Suite
SaaS를 도입할 예정이라면 전자메일이나 그룹웨어등을 먼저 검토하는 것이 좋다.
•PaaS: 어플리케이션 실행 환경이나 데이터베이스등이 미리 마련되어 있다.(PaaS로 제공되는 대표적 도구와 서비스등은 책자 23p)
•IaaS: 사용량에 따른 종량제나 월 정액제를 채택하고 있다, 기업의 기간계 시스템등 주요 시스템에도 IaaS가 보급
대표적인 IaaS서비스에는 AWS의 EC2(Elastic Compute Cloud)

■클라우드 이용 모델
•퍼블릭 클라우드
 - 클라우드 사업자가 시스템을 구축, 인터넷망 등의 네트워크를 통해 불특정 다수의 기업과 개인에게 서비스를 제공하는 형태
 - 필요한 컴퓨팅 자원을 단기간에 저비용으로 마련, 운용부담이 적다는 장점
•프라이빗 클라우드
 - 클라우드 관련 기술이 활용된 자사 전용 환경을 구축하는 형태
•커뮤니티 클라우드
 - 공통의 목적을 가진 기업들이 클라우드 시스템을 형성하여 데이터센터에서 공동 운영하는 형태
•하이브리드 클라우드
 - 클라우드 서비스들과 온프레미스 시스템을 연계시켜 활용하는 시스템 및 서비스

■프라이빗 클라우드의 종류
•온프레미스 프라이빗 클라우드
•호스티드 프라이빗 클라우드

■클라우드와 온프레미스 비용 비교
 - 온프레미스의 경우 하드웨어와 소프트웨어의 조달 비용이 필요, 운영 후에는 시설관리비와 하드웨어 리스비용 및 임대비용, 유지보수비용,
운용 담당자의 인건비 같은 비용이 소요된다.
 - 클라우드의 경우 필요할 때 필요한 만큼 가상 서버같은 자원을 유연하게 사용할 수 있으므로 비용 최적화를 꾀할 수 있다.
운영 비용도 월 정액제로 사용할 수 있으므로 평준화 시킬 수 있다.
하지만 조건에 따라서는 온프레미스가 저렴한 경우도 있다
(기업사용자가 5년이상의 장기간에 걸쳐 시스템을 사용하는 경우 혹은 대규모 시스템을 구축하고 운용할 경우 등)

■클라우드, 온프레미스의 도입과 확장성 비교
■클라우드의 안정성과 신뢰성
■클라우드 서비스의 책임 분계선
■중소기업의 클라우드 도입과 대기업의 클라우드 도입

★클라우드 서비스에 장애나 문제가 발생했을 때의 대응(42p)

[Chapter 2]
■클라우드로 제공하는 다양한 서비스
•가상서버: 가상CPU의 성능과 메모리 용량을 사용용도와 시스템의 규모에 맞게 선택 할 수 있다.
•로드 밸런서: 가상서버를 이중화 하거나 부하를 분산시킬 수 있다, 통신량에 따라 가상서버의 갯수를 늘이거나 줄일 수 있다(오토 스케일)
•스토리지 서비스: 아카이브(보관), 백업(보호), 시스템의 재해대책 등 다양한 용도로 사용된다.
•높은 수준의 보안이 필요한 경우 VPN(Virtual Private Network)이나 전용선 등의 네트워크 서비스를 이용할 수 있다

■가상 서버
 - 각각의 가상 서버는 물리 서버와 마찬가지로 개별 OS나 애플리케이션을 동작시킬 수 있다.
단, 가상 서버는 하드웨어를 애뮬레이션 하기 때문에 가상화 하지 않은 서버에 비해 성능이 떨어진다.
 - 셀프 서비스식 포털 화면을 통해 기동/중지/재기동/삭제 등을 몇 분안에 쉽게 처리 할 수 있다.
 - 가상CPU의 성능 및 메모리 용량에 따라 가격이 정해져 있다
 - 무료 OS로는 Cent OS나 Ubuntu등이 있다, 유료 OS로는 Microsoft Windows Server

■가상 서버에서 사용할 수 있는 옵션 기능
 - 로드 밸런서, 오토 스케일, 정기적인 스냅샷(스냅샷으로 가상 서버 디스크를 자동으로 백업한다)

•네트워크 복습 
-A class의 사설 IP 10.x.x.x (10.0.0.0/8 subnet 1개)10.0.0.0~10.255.255.255
-B class의 사설 IP 172.16~31.x.x(172.16.0.0/12) 172.16.0.0~172.31.255.255/16
-C class의 사설 IP 192.168.x.x(192.168.0.0/16)prefix: Network ID bit 수 192.168.0.0~192.168.255.255/24


■클라우드 스토리지 서비스
 - 대표적인 스토리지 서비스로는 AWS의 S3(Simple Storage Service) 오브젝트 스토리지
 - 다수의 데이터 센터에 데이터를 분산 저장하여 데이터의 손실을 예방, 사용한 용량만큼 요금이 부과
S3 보다 저렴한 Amazon S3 Glacier라는 클라우드 스토리지도 제공하고 있다.
S3등의 오브젝트 스토리지 서비스는 데이터의 읽기 쓰기등의 속도가 빠른 편이 아니다.
 - 엄격한 응답 시간이 요구되는 데이터베이스 용도로 이용할 경우 블록단위로 엑세스 할 수 있는 블록 스토리지 서비스를 선택
 - 대표적인 블록 스토리지 서비스로는 EBS(Amazon Elastic Block Storage)
 - 기업의 파일 서버로 사용하는 경우, 파일 단위로 스토리지 엑세스가 가능하며, 파일 공유 기능을 갖춘 파일 스토리지 서비스를 이용
 - 대표적인 파일 스토리지 서비스로는 EFS(Amazon Elastic File System)이 있다.

■클라우드 네트워크 서비스
•클라우드 위에 네트워크를 구축
 - 네트워크 기능을 가진 클라우드 서비스로는 Amazon VPC(Virtual Private Cloud)가 있다
 - AWS위에 가상 네트웤크를 만들어, 개인 클라우드처럼 사용할 수 있는 서비스
 - Amazon VPC는 프라이빗 IP 주소가 할당된 네트워크에 가상 VPN 게이트웨이를 제공(거점과 거점을 인터넷 VPN으로 연결할 수 있다)
 - 보안 기능으로는 필터링을 통해 불필요한 통신을 차단하는 기능을 제공
 - VPC의 경우 송수신 정책을 설정하는 '보안 그룹'이라는 기능을 설정하면 접속제어(통신필터)가 가능해진다
 - 그 외에도 AWS의 Amazon Route 53으로 대표되는 DNS 서비스가 있다
(자체 도메인 네임으로 웹이나 메일을 이용할 때 필요한 공개용 DNS 서버를 운영하고 관리, Zone 정보와 Record 정보를 설정할 수 있으므로
로드 밸런서 같은 서비스와 연계시켜 가용성 높은 시스템을 구축할 수 있다)

■클라우드 데이터베이스 서비스
 - Amazon RDS는 일반적인 RDBMS(Realational Database Management System: 관계형 데이터베이스 관리 시스템)이다.
 
•데이터 웨어하우스
 - Amazon Redshift는 페타바이트(1000테라 바이트)급의 데이터를 처리할 수 있는 서비스
•NoSQL
 - Amazon DynamoDB는 AWS가 독자 개발한 NoSQL 데이터베이스 서비스(빠르고 확장성이 우수, 낮은 레이턴시가 필요한 애플리케이션의 
데이터베이스로 적합)

■기간계 시스템을 위한 클라우드 서비스
•리프트 앤 시프트를 지원하는 서비스
 - 기업이 현재 운영하고 있는 기존의 온프레미스 시스템을 클라우드 서비스로 이전하고자 할 때 쓰이는 서비스
 - 대부분의 기업들은 VMware 기반의 시스템을 채용하고 있는데, 클라우드 사업자가 제공하는 VMware 지원 서비스를 활용하여 
시스템의 아키텍처변경을 최대한 피하면서 클라우드로 이전 할 수있다

 - 이처럼 기존의 온프레미스 시스템과 호환성과 계승성을 우선시 하기위해 기존의 시스템을변경하지 않고 그대로 들어서 클라우드로 옮기고(Lift)
수시로 클라우드에 최적화(Shift)해 나가는 전략을 리프트 앤 시프트 전략이라고 한다 

•클라우드 ERP
 - 전사적 자원관리(ERP) 패키지의 기능을 클라우드 환경에서 사용하는 클라우드 ERP가 보급되고 있다.

•사내의 기간계 시스템을 클라우드로 이전하기 위한 4가지 접근 방법
1. 애플리케이션 단위의 시프트
2. 리프트 앤 시프트
3. 기존 IT시스템과 클라우드 네이티브의 공존
4. 클라우드 네이티브 시프트

■클라우드의 데이터 분석 서비스와 IoT 서비스
■클라우드 AI/기계학습 서비스
■클라우드를 이용한 시스템 구축
•시스템 구성이 클라우드 서비스에 의존한다.
 - 클라우드 서비스를 이용하는 시스템은 클라우드 서비스가 제공하는 표준화된 서비스(기능)을 조합하는 개념
 - 세세한 커스터마이징 보다 표준화된 시스템 구성을 채택하고, API를 통해 다른 서비스와 연계하자는 사고방식이 필요
 - 기존의 시스템을 클라우드로 바꾼다면 시스템과 아키텍처가 바뀌므로 처리량과 응답속도가 떨어지는 등의 영향 분석이 필요하고, 보안 위험에도
대비

•장애를 위한 설계
 - 클라우드는 온프레미스 시스템에 비해 안정적인 시기에 접어든 시점에 장애가 발생하기 쉽다, 장애 발생을 전제로 시스템 구축을 해야한다.
 - 장애가 발생하더라도 문제없이 운영할 수 있도록 단일 장애지점(SPOF)를 만들지 않고 Zone으로 구분한 다중화 시스템을 구축
 - 운영 자동화 도구등으로 자동화해서 최대한 손이 가지 않는 구조로 만들어야 함

■클라우드 관리 플랫폼(담당자의 접근제어가 중요)
•구성관리
•성능관리
•운영관리
•멀티 클라우드 관리
•사용자 관리

•CI/CD의 특징과 차이점
 - CI/CD는 지속적 통합(Continuous Integration, CI) 및 지속적 배포(Continuous Deployment, CD)를 나타내는 용어
 - 소프트웨어 개발에 있어 자주 사용되는 개념, 이 두 용어는 서로 관련되어 있지만, 각기 다른 목적과 특징을 가지고 있다

1. 지속적 통합(Continuous Integration, CI): 지속적 통합은 개발자가 작성한 코드를 공유 리포지토리에 자주 통합함으로써, 
코드 간 충돌이나 버그가 줄어들고 품질을 높이는 방법이 과정에서 자동화된 빌드 및 테스트가 실행되어 소프트웨어의 안정성을 지속적으로 확인

•자주 적용되는 작은 단위의 업데이트로 문제 해결이 쉽고 빠릅니다.
•팀원 간의 협업이 강화되며, 생산성을 향상시킵니다.
•퀄리티 어셔런스(QA) 팀의 업무 부담이 줄어듭니다.

2. 지속적 배포(Continuous Deployment, CD): 지속적 배포는 지속적 통합 이후의 단계로, 
변경 사항들이 자동화된 방식으로 프로덕션 상황에 배포되는 방식 
이를 통해 소프트웨어 출시를 보다 신속하게 처리하고, 고객의 피드백에 빠르게 대응할 수 있다.

•프로덕션 환경으로 소프트웨어가 실시간으로 배포됩니다.
•새로운 기능이 고객에게 신속하게 제공되며, 고객 만족도가 향상됩니다.
•불필요한 수동 과정이 제거되어 업무 효율성이 높아집니다.

CI는 소프트웨어 개발 단계에서 코드 통합을 자주 진행하고 이에 따른 문제 해결을 용이하게 하는 것이 핵심이며, 
CD는 프로덕션 환경에 빠르게 소프트웨어를 배포하고 고객에게 도입하는 것에 중점을 둡니다.

이 두 용어는 함께 사용되어 효율적인 소프트웨어 개발 및 배포를 가능하게 합니다.
