https://hooks.slack.com/services/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
Slack 웹 후크 url 주소

http://url.kr/k9xei3
 curl -s -d payload={"text":"tedt"} https://hooks.slack.com/services/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

lambda 함수를 이용 SNS에 연동? 함수에도 IAM 권한을 주었다
lambda 함수에 구성한 python 3.9 버전에 requests가 설치되어 있지 않아 가상환경을 구성하여 리눅스나 윈도우즈를 통해 파이썬을 실행하고, 리퀘스트를
설치 후 zip파일로 압축하였고, Lambda 함수에 Layer에 추가하여 zip파일을 업로드 하고 만들어 둔 람다 함수에 layer를 추가시켜 테스트를 해보았으나
리퀘스트 오류는 뜨지 않았지만 key, records 값의 에러가 떠서 그냥 Deloy 버튼으로 함수를 배포하고 기다려보니 slack에서 정상적으로 오류 메시지가 오는 것을
확인하였다

참고 블로그들
https://www.gcptutorials.com/article/how-to-use-requests-module-in-aws-lambda

기타 블로그
https://jforj.tistory.com/293
http://devstory.ibksplatform.com/2017/08/aws-cloudwatch-sns-email.html
https://jojoldu.tistory.com/586
https://labs.brandi.co.kr//2019/05/30/kwakjs.html
https://victorydntmd.tistory.com/68
https://mozi.tistory.com/606


aws cloudwatch: 인스턴스를 모니터링 할 수 있는 서비스
대시보드에서 인스턴스의 상태를 각각 그래프나 막대 형태로 볼 수 있는 기능이 있고, 경보 설정을 통해 인스턴스에 문제가 발생 했을 때 이메일이나 Slack같은 
협업 툴에서 경보 알람이 오게 할 수 있다

EC2 인스턴스의 CPU 사용률을 높은 순으로 정렬, CPU 사용률이 높은 상위 10개 인스턴스,
네트워크 인터페이스에서 인터페이스가 받은 패킷 수, 보낸 패킷 수 이 3개를 그래프와 파이 형식으로 한 눈에 볼 수 있게 구현했다

경보 알림으로는 이메일과 Slack연동으로 하였는데, 
Lambda 함수와 SNS(Simple Notification Service)를 이용해 Flask 인스턴스의 CPU 사용률이 1보다 적거나 같으면 Slack으로 알람이 오게 끔 하였다

-디테일 한 Cloudwatch 설명-
*AWS CloudWatch는 Amazon Web Services(AWS)에서 제공하는 모니터링 서비스로, 애플리케이션, 인프라, 서비스를 관찰하고 분석할 수 있습니다. 
CloudWatch는 로그 파일 분석, 자세한 요청 추적 등의 기능을 제공하여 
사용자가 리소스와 애플리케이션을 모니터하고 운영상의 이슈를 실시간으로 파악하고 조치할 수 있도록 지원합니다

우리가 사용한 Cloudwatch의 기능
대시보드 - 애플리케이션 및 AWS 리소스의 성능을 시각화하고 모니터링할 수 있습니다.
경보 생성 - 메트릭 기준을 기반으로 경보 알람을 생성하여 이메일, SMS, SNS, Lambda 함수 등을 통해 통지받을 수 있습니다. 
이를 통해 장애 발생 시 신속한 조치를 취할 수 있습니다.

■종합
•AWS CloudWatch: 인스턴스 리소스를 모니터링 할 수 있는 서비스

•Lambda: AWS Lambda는 이벤트 기반으로 실행되는 서버리스 컴퓨팅 서비스
서버리스는 사용자가 서버 인스턴스를 직접 관리하지 않고, 코드가 필요한 시점에만 실행되도록하는 컴퓨팅 모델을 의미
Lambda는 코드 실행을 위해 인프라를 프로비저닝하거나 관리할 필요 없이 간단한 함수 형태로 코드를 실행할 수 있게 해줍니다
Lambda는 스케일링과 관련된 부담을 감소시켜주고, 이벤트 기반 아키텍처를 구축할 수 있도록 도와주는 중요한 서비스

•SNS(Simple Notification Service): 토픽(Topic)이라는 개념을 사용하여 메시지를 게시(Publish)하고, 구독(Subscribe)하는 방식으로 동작
픽은 메시지를 수신하는 구독자(Subscriber)들에게 메시지를 전달하는 데 사용됩니다. 
구독자는 이메일, SMS, HTTP 엔드포인트 등 다양한 방법으로 메시지를 수신할 수 있습니다

•Lambda와 SNS를 함께 사용하는 경우: 
Lambda 함수를 SNS 토픽의 구독자로 등록하여 특정 이벤트가 발생할 때 Lambda 함수가 자동으로 트리거되도록 설정할 수 있습니다
(특정 작업을 처리하거나 알림을 보내는 등의 작업을 간단하게 구현)

•요약하면, AWS Lambda는 이벤트 기반 서버리스 컴퓨팅 서비스이며, AWS SNS는 푸시 메시지를 전송하고 구독하는 서비스입니다. 
이 두 서비스를 결합하여 유연하고 확장 가능한 애플리케이션 아키텍처를 구축할 수 있습니다.

ㅁ이벤트:  특정한 사건 또는 변화를 의미
ex)이벤트는 다양한 형태일 수 있습니다. 예를 들면, 계좌에 입금이 발생하는 것이 하나의 이벤트입니다.

AWS Lambda에서는 이벤트에 반응하여 작성한 코드(함수)가 자동으로 실행됩니다
이벤트가 발생할 때마다 Lambda 함수가 실행되기 때문에 "이벤트 기반"이라고 합니다

예시로 돌아가보면, AWS Lambda 함수를 작성하여 계좌에 입금 이벤트가 발생할 때마다 특정 알림을 보내거나, 
데이터베이스에 해당 내역을 기록하는 등의 작업을 할 수 있습니다. 

ㅁ서버를 프로비저닝한다는 말은, 서버를 사용할 수 있도록 사전에 설정하고 구성하는 과정을 의미합니다
서버를 프로비저닝하려면 몇 가지 단계를 거쳐야 합니다.
1. 서버 선택
2. 운영체제 설치
3. 보안 설정
4. 네트워크 설정
5. 응용프로그램 설치
6. 서버 모니터링 설정

ㅁ이러한 Lambda와 SNS를 이용해 Cloudwatch 경보 알림을 Slack으로 올 수 있게 연동하였고, 대시보드에서는 관리가 필요할 것 같은 인스턴스나
모든 인스턴스들의 상태를 모니터링 할 수 있게 시각화 하였다