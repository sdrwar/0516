■Chapter 8-2Ansible-galaxy

■Chapter 9 Ansible 모듈, Ansible Troubleshooting
-Ansible Mudule: Ansible 주요 구성 요소로 Ansible Playbook에서 사용되는 재사용 가능한 스크립트
-이 모듈을 사용하여 작업 완료하는데 필요한 모든 명령 실행
-여기에는 서비스 제어, 소프트웨어 패키지 설치, 파일 및 디렉토리 작업등 기능 포함

ㅁAnsible Mudule 종류
1. System
- 시스템 모듈은 시스템 사용자 및 그룹 수정, IPtables 및 방화벽 구성 수정, 논리 볼륨 그룹 작업, 작업 마운트 서버 및 서비스 작업과 같이 시스템 수준에서 수행 됨

2. Command
-커맨드 모듈(명령 모듈)은 호스트에서 명령 또는 스크립트를 실행하기 위해 사용, 명령 모듈을 사용하는 간단한 명령, 스크립트 모듈을 사용하여 호스트에서 스크립트를
실행할 수 있다

3. File
-파일 모듈은 파일 작업을 수행하기 위해 사용, ex) ACL모듈을 사용하여 파일에 대한 acl 정보를 설정하고 아카이브 및 아카이브 해제 모듈을 사용하여 파일을
압축 및 해제하고 find, lineinfile을 사용하고 모듈을 교체하여 기존 파일의 내용을 수정할 수 있다

4. Database
-mongodb, mysql, mssql, postgresql, proxysql과 같은 데이터 베이스로 작업하여 데이터베이스를 추가 혹은 제거하거나 데이터베이스를 구성하는데 도움이된다

5. Cloud
-Amazon, Azure, Google, Docker, VMware, Digital Ocean, Open Stack과 같은 다양한 클라우드 공급자를 위한 방대한 모듈 모음이 있다

6. Windows
-Windows모듈은 Windows 환경에서 도움이 됨

ㅁAnsible 모듈 사용법
ㅁAnsible 모듈 정보 확인
-ansible-doc 명령어로 해당 모듈 상세 정보 확인 (ex. ansible-doc setup)
-ansible-doc -s: 상세 설명(ex. ansible-doc -s yum)

ㅁAnsible Trubleshooting
-yaml Callback plugin
-ansible.cfg 설정 파일에 yaml callback plugin 설정을 하면(stdout_callback = yaml) 에러 메시지가 정렬되어 출력
-log_plays callback plugin(callback_whitelist = log_plays : 플러그인 사용하려면 해당 플러그인 활성화 필요,
stdout_callback = log_plays : 출력내용 파일에 저장한다는 플러그인 log_plays로 설정)
playbook 실행해도 어떤 메시지도 보이지 않음, 명령어 실행시 발생하는 모든 메시지가 저장되는 디렉토리 및 파일(/var/log/ansible/hosts)-사전생성필요
-assert
assert모듈은 특정 조건이 충족 되지 않으면 에러가 발생하며 실패
-tags: 특정 tag를 포함한 play와 task만 실행 (ex. ansible-playbook --tags=nana,world playbook.yaml)
ansible-playbook --skip-tags=web playbook.yaml: web tag가 붙은 task 제외 실행



■Chapter 10 Ansible 응용

ㅁDocker 설치하기
-VMware를 이용하여 master로 작업 (servera~c의 hosts를 퍼블릭 IP로 변경)
-epel 저장소의 코드를 추가
-master 노드에서 ansible-key.pem을 cp 명령어로 복사해오기, scp로 ansible.cfg및 inventory파일을 master노드로 복사
-master 노드에서 id_rsa.pub 퍼블릭 키를 서버a~c로 복사 (konan사용자)
-contol노드에서 servera~c로의 접속은 nana 사용자로, master(vmware)에서 servera~c로 접속은 konan 사용자로 접속하기
-마스터노드에서 서버a~c로 ssh접속을 할 때, 비밀번호를 묻지않고 바로 접속하게, 그리고 a~c 모두 ssh 접속이 되는지 확인
-ansible을 이용해 master노드에서 servera노드로 docker설치 및 docker_container에 nginx설치 및 servera의 퍼블릭 IP로 웹브라우저로 접속해
설치가 잘 되어있는지 확인, 마스터 노트에서 servera -m shell -a 'docker images'및 'docker ps'로 servera에 docker가 설치 확인
ㅁ필수 선행 조건
-마스터 노드에서 ansible all -m ping을 하여 모든 서버에서의 핑확인(마스터 노드에서 rsa키를 서버 a~c로 복사 후)
-ssh konan@servera~c로 ssh 접속이 되는지 확인
-docker epel 레파지토리 생성 및 docker 설치는 되지 않았었다

ㅁWidow 호스트 관리는 넘어감

ㅁAWS EC2 사용
-작업은 master 노드에서
-AWS EC2 생성 yaml파일의 수정 내용은 cred.yaml파일의 액세스키 비밀키, 인스턴스 타입 t2.small, ec2의 keyname-ansible-key
-access key, secret key는 aws에서 보안 증명 그룹에서 엑세스 생성으로 .csv키로 다운로드 받거나 하기
-vpc-subnet-id는 내 vpc의 첫번째 서브넷 아이디, image는 Amazon Linux 2 Kernel 5.10 의 AMI ID(ami-로 시작하는 아이디)
-ec2-playbook의 27라인을 ec2:가 아닌 ec2_instance:로 수정을 한다
-pip3 install boto3등을 추가로 설치를 한다
-모듈에서 에러가 떠써 master노드가 아니라 control노드 nana사용자 계정으로 실행을 했다(/ansible에서)
-서브넷을 다 사용 중이라면 새로운 서브넷을 생성하고 그 서브넷 아이디를 넣고 리전확인하고(싱가포르라면 사우스이스트-1)작업하고 있는 인스턴스를
넣어줘야한다 
-ec2로 ssh접속을 하기위해 .pem파일을 윈도우에서 리눅스로 복사하여야 한다
ansible-key.pem이 있는 윈도우 디렉토리에서 scp ansible-key.pem root@213.0.113.3:~/ansible
-복사한 키의 권한을 chmod 400으로 수정해 준 후 ssh ec2-user@인스턴스 아이피 -i "ansible-key.pem"으로 접속
