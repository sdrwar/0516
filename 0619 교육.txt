■이해 안됐던 표기 : += (덧셈 후 할당 연산자)
현재 변수의 값을 더한 후 그 결과를 다시 해당 변수에 할당
a += b는 a = a + b와 동일한 의미를 가지며, 변수 a의 값을 b와 더한 결과를 다시 a에 할당
ex)
a = 5
b = 3
a += b
print(a)

8

위의 예시에서 a += b는 a = a + b와 동일하므로,
변수 a의 값인 5에 변수 b의 값인 3을 더한 결과인 8이 변수 a에 다시 할당 따라서 print(a)는 8을 출력

message = "Hello"
name = "John"

message += ", " + name

print(message)  # 출력: "Hello, John"

message += ", " + name은 message = message + ", " + name와 동일
문자열 변수 message에 ,와 이름을 연결한 결과인 "Hello, John"이 다시 message에 할당

•items()는 파이썬 딕셔너리(Dictionary) 객체의 메서드 중 하나
이 메서드는 딕셔너리의 키(key)와 값(value)을 쌍으로 반환하는 반복 가능한(iterable) 항목을 생성
items() 메서드를 호출하면 딕셔너리의 각 항목이 키-값 쌍(tuple) 형태로 반환
items() 메서드는 딕셔너리의 키와 값에 동시에 접근해야 할 때 유용하게 사용

■미니프로젝트시 구상해야 하는 조건?
-서버 관리, 클라우드에 중점을 둘 것인지, 서비스 개발에 중점을 둘 것인지 정하기

1. 모놀로식
 - 1Tier..(웹서버, 디비 ai, 블록체인 등) : 서비스 개발에 중점을 둘 때
 - 2 / 3 Tier -> MSA (DB서버 1, 웹서버 1 등등으로 구성 가능) **

아키텍쳐 설계(쉽게 이해할 수 있도록 그림 잘 그리기, 설계도 같은 부분)
git의 활용도 중요(gitlab 비트 뭐시기 있는데 좋은 코드 있으면 프로젝트 할 때 붙여보기도 하고 안될 땐 강사님 도움요청 해보기)

■정규표현식 나머지
{} : 바로 앞의 문자를 n번 반복하는 표현식 (대괄호로 경우의 수를 더 만들 수 있다 [a,y]{2}b a도 되고 y도 되고..?맞나..)
+ : 1개이상, * : 0개 이상, {} : 범위를 나타낼 때

데이터 수집, 정규식이 중요 (데이터수집은 import ~같은 것)

■클래스
- 객체지향의 가장 기본적 개념
클래스는 하나의 자료
기능을 제공하기 위해 .을 쓴다.(ex text.find나 matplotlib.pyplot.plot 같은 앞의 도구의 기능을 쓰기위해)

● 클래스를 사용하는 이유
1. 새로운 자료형(Lib, API?)
2. 기능의 집합 (기능은 무조건 클래스! 는 아니다, 다른 방법도 있다)
3. 다형성 구현을 위한 상속

상속과 규격의 개념 정리해서 알아야 함
클래스는 소괄호를 붙여서 불러주어야 함

wikidocs.net <- PyQt5 책 볼 수 있는 사이트 (다형성 구현을 위한 상속의 추상화의 개념 보충설명)

클래스 3페이지 내용 보충
기본자료는 값만 가지고, 참조자료는 그 정보의 실제 위치정보를 가진다
클래스로 변수를 만들면 그 변수는 위치정보 값을 가진다(ex. 0 x 100)

•점을 찍지 않고 사용하는 자료 : 기본 자료형
•점을 찍고 사용하는 자료 : 참조 자료형

 - 기본 제공 7가지
숫자, 논리, 문자(예외) - 기본자료이지만 문자만 점을 찍고 사용

참조 자료
리스트, 딕셔너리, 튜플, 셋
클래스

참조자료형의 주소
두 참조자료형의 변수가 같으면(a = b) 변수이름은 다르지만 주소도 같아진다(하위 값까지 같아진다)
문자같은 기본자료형의 변수는 같아져도 (a = b)주소가 달라져 서로의 값에 영향을 주지 않는다

클래스의 구성
1. 변수
2. 함수(메소드)
3. 생성자(초기화 담당)

상속 (상속, 오버라이드)
1. 다형성(특징, 다르게)
 - Override

모듈(module)
 - 파일, xxx.py (확장자가 py)
 - import 모듈명
 from 모듈명 import 함수명
 - alias 사용 가능( alasldlsld as al )

● __name__ 속성
name 속성을 사용하기 위해서는 모듈이 한 번도 실행되지 않아야 하므로 커널에서 리스타트해서 모듈실행 초기화를 시켜준다

■패키지
 - 폴더

예외처리 (다른명령문 보다 경험치를 요구하는 명령문)
오류가 발생하는 여러가지 상황에서 각각 에러 상황에 대한 메시지를 확인하려면 dir(__builtins__)
예외처리 문법의 기본구조
try:
명령문1
명령문2
except [발생 오류 [as 오류 메시지 변수]]:
오류 발생 시 처리할 명령문 실행

-오류가 발생하면 해당라인에서 동작을 멈추고 except 블록으로 이동
-오류가 발생하지 않으면 except 블록은 실행되지 않음
- except에 조건 자세히 명시
- try - except - finally 예외 처리 시 통상적으로 사용되는 문구들
- finally : 오류발생 상관없이 항상 실행, 반드시 실행되어야 하는 경우 사용(ex. close()같은 SQL에서 프로그램을 항상 열어두지 않게끔 하려면 넣어준다) 

강사님 사이트의 파이썬 영역에서 중요한 pdf 번호
문법
01, 02 <- 코딩테스트 가능
03, 06, 07
도구
04, 05

requests, Flask, pymysql 데이터 수집 등